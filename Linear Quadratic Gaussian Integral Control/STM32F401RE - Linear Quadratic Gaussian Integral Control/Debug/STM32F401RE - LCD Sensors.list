
STM32F401RE - LCD Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  080042e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000230  20000078  08004360  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002a8  08004360  000202a8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000160da  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d2b  00000000  00000000  00036182  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b143  00000000  00000000  00038ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000da8  00000000  00000000  00043ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001450  00000000  00000000  00044d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007301  00000000  00000000  000461e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004fd2  00000000  00000000  0004d4e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000524bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002fd8  00000000  00000000  00052538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004024 	.word	0x08004024

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004024 	.word	0x08004024

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2uiz>:
 8000a14:	004a      	lsls	r2, r1, #1
 8000a16:	d211      	bcs.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a1c:	d211      	bcs.n	8000a42 <__aeabi_d2uiz+0x2e>
 8000a1e:	d50d      	bpl.n	8000a3c <__aeabi_d2uiz+0x28>
 8000a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d40e      	bmi.n	8000a48 <__aeabi_d2uiz+0x34>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d102      	bne.n	8000a4e <__aeabi_d2uiz+0x3a>
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a4c:	4770      	bx	lr
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	4770      	bx	lr

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a68:	f000 b97a 	b.w	8000d60 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	468c      	mov	ip, r1
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	9e08      	ldr	r6, [sp, #32]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d151      	bne.n	8000b38 <__udivmoddi4+0xb4>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d96d      	bls.n	8000b76 <__udivmoddi4+0xf2>
 8000a9a:	fab2 fe82 	clz	lr, r2
 8000a9e:	f1be 0f00 	cmp.w	lr, #0
 8000aa2:	d00b      	beq.n	8000abc <__udivmoddi4+0x38>
 8000aa4:	f1ce 0c20 	rsb	ip, lr, #32
 8000aa8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000aac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ab0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ab4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ab8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000abc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ac0:	0c25      	lsrs	r5, r4, #16
 8000ac2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ac6:	fa1f f987 	uxth.w	r9, r7
 8000aca:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ace:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ad2:	fb08 f309 	mul.w	r3, r8, r9
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x6c>
 8000ada:	19ed      	adds	r5, r5, r7
 8000adc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000ae0:	f080 8123 	bcs.w	8000d2a <__udivmoddi4+0x2a6>
 8000ae4:	42ab      	cmp	r3, r5
 8000ae6:	f240 8120 	bls.w	8000d2a <__udivmoddi4+0x2a6>
 8000aea:	f1a8 0802 	sub.w	r8, r8, #2
 8000aee:	443d      	add	r5, r7
 8000af0:	1aed      	subs	r5, r5, r3
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000af8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000afc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b00:	fb00 f909 	mul.w	r9, r0, r9
 8000b04:	45a1      	cmp	r9, r4
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x98>
 8000b08:	19e4      	adds	r4, r4, r7
 8000b0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b0e:	f080 810a 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000b12:	45a1      	cmp	r9, r4
 8000b14:	f240 8107 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	443c      	add	r4, r7
 8000b1c:	eba4 0409 	sub.w	r4, r4, r9
 8000b20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b24:	2100      	movs	r1, #0
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d061      	beq.n	8000bee <__udivmoddi4+0x16a>
 8000b2a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b2e:	2300      	movs	r3, #0
 8000b30:	6034      	str	r4, [r6, #0]
 8000b32:	6073      	str	r3, [r6, #4]
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d907      	bls.n	8000b4c <__udivmoddi4+0xc8>
 8000b3c:	2e00      	cmp	r6, #0
 8000b3e:	d054      	beq.n	8000bea <__udivmoddi4+0x166>
 8000b40:	2100      	movs	r1, #0
 8000b42:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b46:	4608      	mov	r0, r1
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	fab3 f183 	clz	r1, r3
 8000b50:	2900      	cmp	r1, #0
 8000b52:	f040 808e 	bne.w	8000c72 <__udivmoddi4+0x1ee>
 8000b56:	42ab      	cmp	r3, r5
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xdc>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80fa 	bhi.w	8000d54 <__udivmoddi4+0x2d0>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb65 0503 	sbc.w	r5, r5, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	46ac      	mov	ip, r5
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d03f      	beq.n	8000bee <__udivmoddi4+0x16a>
 8000b6e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	b912      	cbnz	r2, 8000b7e <__udivmoddi4+0xfa>
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b7e:	fab7 fe87 	clz	lr, r7
 8000b82:	f1be 0f00 	cmp.w	lr, #0
 8000b86:	d134      	bne.n	8000bf2 <__udivmoddi4+0x16e>
 8000b88:	1beb      	subs	r3, r5, r7
 8000b8a:	0c3a      	lsrs	r2, r7, #16
 8000b8c:	fa1f fc87 	uxth.w	ip, r7
 8000b90:	2101      	movs	r1, #1
 8000b92:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b96:	0c25      	lsrs	r5, r4, #16
 8000b98:	fb02 3318 	mls	r3, r2, r8, r3
 8000b9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ba0:	fb0c f308 	mul.w	r3, ip, r8
 8000ba4:	42ab      	cmp	r3, r5
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x134>
 8000ba8:	19ed      	adds	r5, r5, r7
 8000baa:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x132>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	f200 80d1 	bhi.w	8000d58 <__udivmoddi4+0x2d4>
 8000bb6:	4680      	mov	r8, r0
 8000bb8:	1aed      	subs	r5, r5, r3
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bc0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bc8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bcc:	45a4      	cmp	ip, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x15c>
 8000bd0:	19e4      	adds	r4, r4, r7
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x15a>
 8000bd8:	45a4      	cmp	ip, r4
 8000bda:	f200 80b8 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bde:	4618      	mov	r0, r3
 8000be0:	eba4 040c 	sub.w	r4, r4, ip
 8000be4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be8:	e79d      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000bea:	4631      	mov	r1, r6
 8000bec:	4630      	mov	r0, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	f1ce 0420 	rsb	r4, lr, #32
 8000bf6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bfe:	fa20 f804 	lsr.w	r8, r0, r4
 8000c02:	0c3a      	lsrs	r2, r7, #16
 8000c04:	fa25 f404 	lsr.w	r4, r5, r4
 8000c08:	ea48 0803 	orr.w	r8, r8, r3
 8000c0c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c10:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c14:	fb02 4411 	mls	r4, r2, r1, r4
 8000c18:	fa1f fc87 	uxth.w	ip, r7
 8000c1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c20:	fb01 f30c 	mul.w	r3, r1, ip
 8000c24:	42ab      	cmp	r3, r5
 8000c26:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c2a:	d909      	bls.n	8000c40 <__udivmoddi4+0x1bc>
 8000c2c:	19ed      	adds	r5, r5, r7
 8000c2e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000c32:	f080 808a 	bcs.w	8000d4a <__udivmoddi4+0x2c6>
 8000c36:	42ab      	cmp	r3, r5
 8000c38:	f240 8087 	bls.w	8000d4a <__udivmoddi4+0x2c6>
 8000c3c:	3902      	subs	r1, #2
 8000c3e:	443d      	add	r5, r7
 8000c40:	1aeb      	subs	r3, r5, r3
 8000c42:	fa1f f588 	uxth.w	r5, r8
 8000c46:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c4a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c52:	fb00 f30c 	mul.w	r3, r0, ip
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0x1e6>
 8000c5a:	19ed      	adds	r5, r5, r7
 8000c5c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c60:	d26f      	bcs.n	8000d42 <__udivmoddi4+0x2be>
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	d96d      	bls.n	8000d42 <__udivmoddi4+0x2be>
 8000c66:	3802      	subs	r0, #2
 8000c68:	443d      	add	r5, r7
 8000c6a:	1aeb      	subs	r3, r5, r3
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	e78f      	b.n	8000b92 <__udivmoddi4+0x10e>
 8000c72:	f1c1 0720 	rsb	r7, r1, #32
 8000c76:	fa22 f807 	lsr.w	r8, r2, r7
 8000c7a:	408b      	lsls	r3, r1
 8000c7c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c80:	ea48 0303 	orr.w	r3, r8, r3
 8000c84:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c92:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c96:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c9a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c9e:	fa1f f883 	uxth.w	r8, r3
 8000ca2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ca6:	fb09 f408 	mul.w	r4, r9, r8
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x244>
 8000cb6:	18ed      	adds	r5, r5, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cbc:	d243      	bcs.n	8000d46 <__udivmoddi4+0x2c2>
 8000cbe:	42ac      	cmp	r4, r5
 8000cc0:	d941      	bls.n	8000d46 <__udivmoddi4+0x2c2>
 8000cc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cc6:	441d      	add	r5, r3
 8000cc8:	1b2d      	subs	r5, r5, r4
 8000cca:	fa1f fe8e 	uxth.w	lr, lr
 8000cce:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cd2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cd6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cda:	fb00 f808 	mul.w	r8, r0, r8
 8000cde:	45a0      	cmp	r8, r4
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x26e>
 8000ce2:	18e4      	adds	r4, r4, r3
 8000ce4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ce8:	d229      	bcs.n	8000d3e <__udivmoddi4+0x2ba>
 8000cea:	45a0      	cmp	r8, r4
 8000cec:	d927      	bls.n	8000d3e <__udivmoddi4+0x2ba>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	441c      	add	r4, r3
 8000cf2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cf6:	eba4 0408 	sub.w	r4, r4, r8
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	454c      	cmp	r4, r9
 8000d00:	46c6      	mov	lr, r8
 8000d02:	464d      	mov	r5, r9
 8000d04:	d315      	bcc.n	8000d32 <__udivmoddi4+0x2ae>
 8000d06:	d012      	beq.n	8000d2e <__udivmoddi4+0x2aa>
 8000d08:	b156      	cbz	r6, 8000d20 <__udivmoddi4+0x29c>
 8000d0a:	ebba 030e 	subs.w	r3, sl, lr
 8000d0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d12:	fa04 f707 	lsl.w	r7, r4, r7
 8000d16:	40cb      	lsrs	r3, r1
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	40cc      	lsrs	r4, r1
 8000d1c:	6037      	str	r7, [r6, #0]
 8000d1e:	6074      	str	r4, [r6, #4]
 8000d20:	2100      	movs	r1, #0
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	4618      	mov	r0, r3
 8000d28:	e6f8      	b.n	8000b1c <__udivmoddi4+0x98>
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	e6e0      	b.n	8000af0 <__udivmoddi4+0x6c>
 8000d2e:	45c2      	cmp	sl, r8
 8000d30:	d2ea      	bcs.n	8000d08 <__udivmoddi4+0x284>
 8000d32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d36:	eb69 0503 	sbc.w	r5, r9, r3
 8000d3a:	3801      	subs	r0, #1
 8000d3c:	e7e4      	b.n	8000d08 <__udivmoddi4+0x284>
 8000d3e:	4628      	mov	r0, r5
 8000d40:	e7d7      	b.n	8000cf2 <__udivmoddi4+0x26e>
 8000d42:	4640      	mov	r0, r8
 8000d44:	e791      	b.n	8000c6a <__udivmoddi4+0x1e6>
 8000d46:	4681      	mov	r9, r0
 8000d48:	e7be      	b.n	8000cc8 <__udivmoddi4+0x244>
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	e778      	b.n	8000c40 <__udivmoddi4+0x1bc>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	e745      	b.n	8000be0 <__udivmoddi4+0x15c>
 8000d54:	4608      	mov	r0, r1
 8000d56:	e708      	b.n	8000b6a <__udivmoddi4+0xe6>
 8000d58:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5c:	443d      	add	r5, r7
 8000d5e:	e72b      	b.n	8000bb8 <__udivmoddi4+0x134>

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_InitTick+0x3c>)
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_InitTick+0x40>)
{
 8000d6a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	7818      	ldrb	r0, [r3, #0]
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d76:	6810      	ldr	r0, [r2, #0]
 8000d78:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d7c:	f000 f89c 	bl	8000eb8 <HAL_SYSTICK_Config>
 8000d80:	4604      	mov	r4, r0
 8000d82:	b958      	cbnz	r0, 8000d9c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	2d0f      	cmp	r5, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	4602      	mov	r2, r0
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	f000 f85e 	bl	8000e50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_InitTick+0x44>)
 8000d96:	4620      	mov	r0, r4
 8000d98:	601d      	str	r5, [r3, #0]
 8000d9a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d9c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	20000010 	.word	0x20000010
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_Init>:
{
 8000dac:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_Init+0x30>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000db6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dbe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dc6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f82f 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff ffc8 	bl	8000d64 <HAL_InitTick>
  HAL_MspInit();
 8000dd4:	f002 fb40 	bl	8003458 <HAL_MspInit>
}
 8000dd8:	2000      	movs	r0, #0
 8000dda:	bd08      	pop	{r3, pc}
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_IncTick+0x10>)
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_IncTick+0x14>)
 8000de4:	6811      	ldr	r1, [r2, #0]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	440b      	add	r3, r1
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000164 	.word	0x20000164
 8000df4:	20000000 	.word	0x20000000

08000df8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000df8:	4b01      	ldr	r3, [pc, #4]	; (8000e00 <HAL_GetTick+0x8>)
 8000dfa:	6818      	ldr	r0, [r3, #0]
}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000164 	.word	0x20000164

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b538      	push	{r3, r4, r5, lr}
 8000e06:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff fff6 	bl	8000df8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	bf1c      	itt	ne
 8000e10:	4b05      	ldrne	r3, [pc, #20]	; (8000e28 <HAL_Delay+0x24>)
 8000e12:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000e16:	bf18      	it	ne
 8000e18:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1a:	f7ff ffed 	bl	8000df8 <HAL_GetTick>
 8000e1e:	1b40      	subs	r0, r0, r5
 8000e20:	4284      	cmp	r4, r0
 8000e22:	d8fa      	bhi.n	8000e1a <HAL_Delay+0x16>
  {
  }
}
 8000e24:	bd38      	pop	{r3, r4, r5, pc}
 8000e26:	bf00      	nop
 8000e28:	20000000 	.word	0x20000000

08000e2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e2e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	0200      	lsls	r0, r0, #8
 8000e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e42:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e46:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e48:	60d3      	str	r3, [r2, #12]
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b530      	push	{r4, r5, lr}
 8000e54:	68dc      	ldr	r4, [r3, #12]
 8000e56:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	bf28      	it	cs
 8000e64:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 0501 	mov.w	r5, #1
 8000e6c:	fa05 f303 	lsl.w	r3, r5, r3
 8000e70:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e74:	bf8c      	ite	hi
 8000e76:	3c03      	subhi	r4, #3
 8000e78:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7e:	fa05 f404 	lsl.w	r4, r5, r4
 8000e82:	3c01      	subs	r4, #1
 8000e84:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000e86:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	ea42 0201 	orr.w	r2, r2, r1
 8000e8c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	bfad      	iteet	ge
 8000e92:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	f000 000f 	andlt.w	r0, r0, #15
 8000e9a:	4b06      	ldrlt	r3, [pc, #24]	; (8000eb4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	bfb5      	itete	lt
 8000ea2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000eac:	bd30      	pop	{r4, r5, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	e000ed14 	.word	0xe000ed14

08000eb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	3801      	subs	r0, #1
 8000eba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ebe:	d20a      	bcs.n	8000ed6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	21f0      	movs	r1, #240	; 0xf0
 8000ec8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800108c <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef0:	4a64      	ldr	r2, [pc, #400]	; (8001084 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000ef4:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef8:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000efc:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f00:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000f04:	42b7      	cmp	r7, r6
 8000f06:	f040 80ad 	bne.w	8001064 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0a:	684c      	ldr	r4, [r1, #4]
 8000f0c:	f024 0a10 	bic.w	sl, r4, #16
 8000f10:	f1ba 0f02 	cmp.w	sl, #2
 8000f14:	d116      	bne.n	8000f44 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000f16:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000f1a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f22:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f26:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f2a:	f04f 0e0f 	mov.w	lr, #15
 8000f2e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000f32:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f36:	690d      	ldr	r5, [r1, #16]
 8000f38:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f3c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000f40:	f8cc 5020 	str.w	r5, [ip, #32]
 8000f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f48:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f4a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f52:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f54:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f58:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f60:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f64:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f68:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6c:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000f6e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f72:	d815      	bhi.n	8000fa0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000f74:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f78:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7c:	68cd      	ldr	r5, [r1, #12]
 8000f7e:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000f82:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000f86:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f8a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8e:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f92:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000f96:	fa0e fe03 	lsl.w	lr, lr, r3
 8000f9a:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000f9e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000fa0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa2:	9d00      	ldr	r5, [sp, #0]
 8000fa4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa6:	688f      	ldr	r7, [r1, #8]
 8000fa8:	fa07 f70c 	lsl.w	r7, r7, ip
 8000fac:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000fae:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb0:	00e5      	lsls	r5, r4, #3
 8000fb2:	d557      	bpl.n	8001064 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb4:	f04f 0b00 	mov.w	fp, #0
 8000fb8:	f8cd b00c 	str.w	fp, [sp, #12]
 8000fbc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc0:	4d31      	ldr	r5, [pc, #196]	; (8001088 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000fc6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000fca:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000fce:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000fd2:	9703      	str	r7, [sp, #12]
 8000fd4:	9f03      	ldr	r7, [sp, #12]
 8000fd6:	f023 0703 	bic.w	r7, r3, #3
 8000fda:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000fde:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000fee:	f04f 0e0f 	mov.w	lr, #15
 8000ff2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffc:	d039      	beq.n	8001072 <HAL_GPIO_Init+0x18e>
 8000ffe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001002:	42a8      	cmp	r0, r5
 8001004:	d037      	beq.n	8001076 <HAL_GPIO_Init+0x192>
 8001006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800100a:	42a8      	cmp	r0, r5
 800100c:	d035      	beq.n	800107a <HAL_GPIO_Init+0x196>
 800100e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001012:	42a8      	cmp	r0, r5
 8001014:	d033      	beq.n	800107e <HAL_GPIO_Init+0x19a>
 8001016:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800101a:	42a8      	cmp	r0, r5
 800101c:	bf14      	ite	ne
 800101e:	2507      	movne	r5, #7
 8001020:	2504      	moveq	r5, #4
 8001022:	fa05 f50c 	lsl.w	r5, r5, ip
 8001026:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800102a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800102c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800102e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001030:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001034:	bf0c      	ite	eq
 8001036:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001038:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800103a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800103c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001042:	bf0c      	ite	eq
 8001044:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001046:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001048:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001050:	bf0c      	ite	eq
 8001052:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001054:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001056:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001058:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800105c:	bf54      	ite	pl
 800105e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001060:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001062:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001064:	3301      	adds	r3, #1
 8001066:	2b10      	cmp	r3, #16
 8001068:	f47f af47 	bne.w	8000efa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800106c:	b005      	add	sp, #20
 800106e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	465d      	mov	r5, fp
 8001074:	e7d5      	b.n	8001022 <HAL_GPIO_Init+0x13e>
 8001076:	2501      	movs	r5, #1
 8001078:	e7d3      	b.n	8001022 <HAL_GPIO_Init+0x13e>
 800107a:	2502      	movs	r5, #2
 800107c:	e7d1      	b.n	8001022 <HAL_GPIO_Init+0x13e>
 800107e:	2503      	movs	r5, #3
 8001080:	e7cf      	b.n	8001022 <HAL_GPIO_Init+0x13e>
 8001082:	bf00      	nop
 8001084:	40013c00 	.word	0x40013c00
 8001088:	40020000 	.word	0x40020000
 800108c:	40023800 	.word	0x40023800

08001090 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	b10a      	cbz	r2, 8001096 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001092:	6181      	str	r1, [r0, #24]
 8001094:	4770      	bx	lr
 8001096:	0409      	lsls	r1, r1, #16
 8001098:	e7fb      	b.n	8001092 <HAL_GPIO_WritePin+0x2>

0800109a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800109a:	6943      	ldr	r3, [r0, #20]
 800109c:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010a0:	bf08      	it	eq
 80010a2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a4:	6181      	str	r1, [r0, #24]
 80010a6:	4770      	bx	lr

080010a8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010a8:	6801      	ldr	r1, [r0, #0]
 80010aa:	694b      	ldr	r3, [r1, #20]
 80010ac:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	d010      	beq.n	80010d8 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010b6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80010ba:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80010bc:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80010be:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80010c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010c4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010c8:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ca:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80010d4:	2001      	movs	r0, #1
 80010d6:	4770      	bx	lr
  }
  return HAL_OK;
 80010d8:	4618      	mov	r0, r3
}
 80010da:	4770      	bx	lr

080010dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80010dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010e0:	4604      	mov	r4, r0
 80010e2:	4617      	mov	r7, r2
 80010e4:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80010e6:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80010ea:	b28e      	uxth	r6, r1
 80010ec:	6825      	ldr	r5, [r4, #0]
 80010ee:	f1b8 0f01 	cmp.w	r8, #1
 80010f2:	bf0c      	ite	eq
 80010f4:	696b      	ldreq	r3, [r5, #20]
 80010f6:	69ab      	ldrne	r3, [r5, #24]
 80010f8:	ea36 0303 	bics.w	r3, r6, r3
 80010fc:	bf14      	ite	ne
 80010fe:	2001      	movne	r0, #1
 8001100:	2000      	moveq	r0, #0
 8001102:	b908      	cbnz	r0, 8001108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001108:	696b      	ldr	r3, [r5, #20]
 800110a:	055a      	lsls	r2, r3, #21
 800110c:	d516      	bpl.n	800113c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001114:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001116:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800111a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800111c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001122:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001126:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800112a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800112c:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001130:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001132:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
 8001138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800113c:	1c7b      	adds	r3, r7, #1
 800113e:	d0d5      	beq.n	80010ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001140:	f7ff fe5a 	bl	8000df8 <HAL_GetTick>
 8001144:	eba0 0009 	sub.w	r0, r0, r9
 8001148:	4287      	cmp	r7, r0
 800114a:	d301      	bcc.n	8001150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 800114c:	2f00      	cmp	r7, #0
 800114e:	d1cd      	bne.n	80010ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001150:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001152:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001154:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001156:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800115a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800115e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001160:	f042 0220 	orr.w	r2, r2, #32
 8001164:	e7e4      	b.n	8001130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08001166 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001166:	b570      	push	{r4, r5, r6, lr}
 8001168:	4604      	mov	r4, r0
 800116a:	460d      	mov	r5, r1
 800116c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	075b      	lsls	r3, r3, #29
 8001174:	d501      	bpl.n	800117a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001176:	2000      	movs	r0, #0
 8001178:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff ff94 	bl	80010a8 <I2C_IsAcknowledgeFailed>
 8001180:	b9a8      	cbnz	r0, 80011ae <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001182:	1c6a      	adds	r2, r5, #1
 8001184:	d0f3      	beq.n	800116e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001186:	f7ff fe37 	bl	8000df8 <HAL_GetTick>
 800118a:	1b80      	subs	r0, r0, r6
 800118c:	4285      	cmp	r5, r0
 800118e:	d301      	bcc.n	8001194 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001190:	2d00      	cmp	r5, #0
 8001192:	d1ec      	bne.n	800116e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001194:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001196:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001198:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800119a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800119e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80011a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011a8:	f042 0220 	orr.w	r2, r2, #32
 80011ac:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80011ae:	2001      	movs	r0, #1
}
 80011b0:	bd70      	pop	{r4, r5, r6, pc}

080011b2 <I2C_WaitOnFlagUntilTimeout>:
{
 80011b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011b6:	9e08      	ldr	r6, [sp, #32]
 80011b8:	4604      	mov	r4, r0
 80011ba:	4690      	mov	r8, r2
 80011bc:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011be:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80011c2:	b28d      	uxth	r5, r1
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	f1b9 0f01 	cmp.w	r9, #1
 80011ca:	bf0c      	ite	eq
 80011cc:	695b      	ldreq	r3, [r3, #20]
 80011ce:	699b      	ldrne	r3, [r3, #24]
 80011d0:	ea35 0303 	bics.w	r3, r5, r3
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	4543      	cmp	r3, r8
 80011dc:	d002      	beq.n	80011e4 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80011de:	2000      	movs	r0, #0
}
 80011e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80011e4:	1c7b      	adds	r3, r7, #1
 80011e6:	d0ed      	beq.n	80011c4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011e8:	f7ff fe06 	bl	8000df8 <HAL_GetTick>
 80011ec:	1b80      	subs	r0, r0, r6
 80011ee:	4287      	cmp	r7, r0
 80011f0:	d301      	bcc.n	80011f6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80011f2:	2f00      	cmp	r7, #0
 80011f4:	d1e6      	bne.n	80011c4 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80011f6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80011f8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80011fa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80011fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001200:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001204:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001206:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800120a:	f042 0220 	orr.w	r2, r2, #32
 800120e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001210:	2001      	movs	r0, #1
 8001212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001216 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001216:	b570      	push	{r4, r5, r6, lr}
 8001218:	4604      	mov	r4, r0
 800121a:	460d      	mov	r5, r1
 800121c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	061b      	lsls	r3, r3, #24
 8001224:	d501      	bpl.n	800122a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001226:	2000      	movs	r0, #0
 8001228:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff ff3c 	bl	80010a8 <I2C_IsAcknowledgeFailed>
 8001230:	b9a8      	cbnz	r0, 800125e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001232:	1c6a      	adds	r2, r5, #1
 8001234:	d0f3      	beq.n	800121e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001236:	f7ff fddf 	bl	8000df8 <HAL_GetTick>
 800123a:	1b80      	subs	r0, r0, r6
 800123c:	4285      	cmp	r5, r0
 800123e:	d301      	bcc.n	8001244 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001240:	2d00      	cmp	r5, #0
 8001242:	d1ec      	bne.n	800121e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001244:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001246:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001248:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800124a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800124e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001252:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001254:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001258:	f042 0220 	orr.w	r2, r2, #32
 800125c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800125e:	2001      	movs	r0, #1
}
 8001260:	bd70      	pop	{r4, r5, r6, pc}
	...

08001264 <HAL_I2C_Init>:
{
 8001264:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001266:	4604      	mov	r4, r0
 8001268:	b908      	cbnz	r0, 800126e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800126a:	2001      	movs	r0, #1
 800126c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800126e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001272:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001276:	b91b      	cbnz	r3, 8001280 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001278:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800127c:	f002 f90c 	bl	8003498 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001280:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001282:	2324      	movs	r3, #36	; 0x24
 8001284:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001288:	6813      	ldr	r3, [r2, #0]
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001290:	f000 fc4c 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001294:	6865      	ldr	r5, [r4, #4]
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_I2C_Init+0x138>)
 8001298:	429d      	cmp	r5, r3
 800129a:	d84d      	bhi.n	8001338 <HAL_I2C_Init+0xd4>
 800129c:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <HAL_I2C_Init+0x13c>)
 800129e:	4298      	cmp	r0, r3
 80012a0:	d9e3      	bls.n	800126a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012a2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80012a4:	493f      	ldr	r1, [pc, #252]	; (80013a4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012a6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80012a8:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b0:	430b      	orrs	r3, r1
 80012b2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012b4:	6a13      	ldr	r3, [r2, #32]
 80012b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ba:	3101      	adds	r1, #1
 80012bc:	4319      	orrs	r1, r3
 80012be:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012c0:	69d1      	ldr	r1, [r2, #28]
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_I2C_Init+0x138>)
 80012c4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80012c8:	429d      	cmp	r5, r3
 80012ca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80012ce:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80012d2:	d848      	bhi.n	8001366 <HAL_I2C_Init+0x102>
 80012d4:	006d      	lsls	r5, r5, #1
 80012d6:	fbb0 f0f5 	udiv	r0, r0, r5
 80012da:	3001      	adds	r0, #1
 80012dc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	bf38      	it	cc
 80012e4:	2304      	movcc	r3, #4
 80012e6:	430b      	orrs	r3, r1
 80012e8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012ea:	6811      	ldr	r1, [r2, #0]
 80012ec:	6a20      	ldr	r0, [r4, #32]
 80012ee:	69e3      	ldr	r3, [r4, #28]
 80012f0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80012f4:	4303      	orrs	r3, r0
 80012f6:	430b      	orrs	r3, r1
 80012f8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012fa:	6891      	ldr	r1, [r2, #8]
 80012fc:	68e0      	ldr	r0, [r4, #12]
 80012fe:	6923      	ldr	r3, [r4, #16]
 8001300:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001304:	4303      	orrs	r3, r0
 8001306:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800130a:	430b      	orrs	r3, r1
 800130c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800130e:	68d1      	ldr	r1, [r2, #12]
 8001310:	69a0      	ldr	r0, [r4, #24]
 8001312:	6963      	ldr	r3, [r4, #20]
 8001314:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001318:	4303      	orrs	r3, r0
 800131a:	430b      	orrs	r3, r1
 800131c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001326:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001328:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800132c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001330:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001332:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001336:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_I2C_Init+0x144>)
 800133a:	4298      	cmp	r0, r3
 800133c:	d995      	bls.n	800126a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800133e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001340:	4e18      	ldr	r6, [pc, #96]	; (80013a4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001342:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001344:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800134c:	4333      	orrs	r3, r6
 800134e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001350:	6a13      	ldr	r3, [r2, #32]
 8001352:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001356:	4371      	muls	r1, r6
 8001358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800135c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001360:	fbb1 f1f6 	udiv	r1, r1, r6
 8001364:	e7a9      	b.n	80012ba <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001366:	68a3      	ldr	r3, [r4, #8]
 8001368:	b953      	cbnz	r3, 8001380 <HAL_I2C_Init+0x11c>
 800136a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800136e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001372:	1c43      	adds	r3, r0, #1
 8001374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001378:	b16b      	cbz	r3, 8001396 <HAL_I2C_Init+0x132>
 800137a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137e:	e7b2      	b.n	80012e6 <HAL_I2C_Init+0x82>
 8001380:	2319      	movs	r3, #25
 8001382:	436b      	muls	r3, r5
 8001384:	fbb0 f0f3 	udiv	r0, r0, r3
 8001388:	1c43      	adds	r3, r0, #1
 800138a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138e:	b113      	cbz	r3, 8001396 <HAL_I2C_Init+0x132>
 8001390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001394:	e7a7      	b.n	80012e6 <HAL_I2C_Init+0x82>
 8001396:	2301      	movs	r3, #1
 8001398:	e7a5      	b.n	80012e6 <HAL_I2C_Init+0x82>
 800139a:	bf00      	nop
 800139c:	000186a0 	.word	0x000186a0
 80013a0:	001e847f 	.word	0x001e847f
 80013a4:	000f4240 	.word	0x000f4240
 80013a8:	003d08ff 	.word	0x003d08ff

080013ac <HAL_I2C_Master_Transmit>:
{
 80013ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80013b0:	4604      	mov	r4, r0
 80013b2:	461f      	mov	r7, r3
 80013b4:	460d      	mov	r5, r1
 80013b6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff fd1e 	bl	8000df8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013bc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80013c0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80013c2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c4:	d004      	beq.n	80013d0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80013c6:	2502      	movs	r5, #2
}
 80013c8:	4628      	mov	r0, r5
 80013ca:	b004      	add	sp, #16
 80013cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013d0:	9000      	str	r0, [sp, #0]
 80013d2:	2319      	movs	r3, #25
 80013d4:	2201      	movs	r2, #1
 80013d6:	4958      	ldr	r1, [pc, #352]	; (8001538 <HAL_I2C_Master_Transmit+0x18c>)
 80013d8:	4620      	mov	r0, r4
 80013da:	f7ff feea 	bl	80011b2 <I2C_WaitOnFlagUntilTimeout>
 80013de:	2800      	cmp	r0, #0
 80013e0:	d1f1      	bne.n	80013c6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80013e2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d0ed      	beq.n	80013c6 <HAL_I2C_Master_Transmit+0x1a>
 80013ea:	2301      	movs	r3, #1
 80013ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80013f6:	bf5e      	ittt	pl
 80013f8:	681a      	ldrpl	r2, [r3, #0]
 80013fa:	f042 0201 	orrpl.w	r2, r2, #1
 80013fe:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001406:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001408:	2221      	movs	r2, #33	; 0x21
 800140a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800140e:	2210      	movs	r2, #16
 8001410:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001414:	2200      	movs	r2, #0
 8001416:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001418:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800141a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800141c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800141e:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_I2C_Master_Transmit+0x190>)
 8001420:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001422:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001424:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001428:	2a08      	cmp	r2, #8
 800142a:	d004      	beq.n	8001436 <HAL_I2C_Master_Transmit+0x8a>
 800142c:	2a01      	cmp	r2, #1
 800142e:	d002      	beq.n	8001436 <HAL_I2C_Master_Transmit+0x8a>
 8001430:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001434:	d104      	bne.n	8001440 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e002      	b.n	8001446 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001440:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001442:	2a12      	cmp	r2, #18
 8001444:	d0f7      	beq.n	8001436 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001446:	9600      	str	r6, [sp, #0]
 8001448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800144a:	2200      	movs	r2, #0
 800144c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff feae 	bl	80011b2 <I2C_WaitOnFlagUntilTimeout>
 8001456:	b108      	cbz	r0, 800145c <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8001458:	2501      	movs	r5, #1
 800145a:	e7b5      	b.n	80013c8 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800145c:	6923      	ldr	r3, [r4, #16]
 800145e:	6822      	ldr	r2, [r4, #0]
 8001460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001464:	d113      	bne.n	800148e <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001466:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800146a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800146c:	4633      	mov	r3, r6
 800146e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001470:	4933      	ldr	r1, [pc, #204]	; (8001540 <HAL_I2C_Master_Transmit+0x194>)
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff fe32 	bl	80010dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001478:	4605      	mov	r5, r0
 800147a:	2800      	cmp	r0, #0
 800147c:	d1ec      	bne.n	8001458 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	9003      	str	r0, [sp, #12]
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	9203      	str	r2, [sp, #12]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	9303      	str	r3, [sp, #12]
 800148a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800148c:	e044      	b.n	8001518 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800148e:	11eb      	asrs	r3, r5, #7
 8001490:	f003 0306 	and.w	r3, r3, #6
 8001494:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001498:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800149a:	492a      	ldr	r1, [pc, #168]	; (8001544 <HAL_I2C_Master_Transmit+0x198>)
 800149c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800149e:	4633      	mov	r3, r6
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff fe1b 	bl	80010dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d1d6      	bne.n	8001458 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	b2ed      	uxtb	r5, r5
 80014ae:	611d      	str	r5, [r3, #16]
 80014b0:	e7dc      	b.n	800146c <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b2:	4632      	mov	r2, r6
 80014b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fead 	bl	8001216 <I2C_WaitOnTXEFlagUntilTimeout>
 80014bc:	b140      	cbz	r0, 80014d0 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014c0:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c2:	bf01      	itttt	eq
 80014c4:	6822      	ldreq	r2, [r4, #0]
 80014c6:	6813      	ldreq	r3, [r2, #0]
 80014c8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80014cc:	6013      	streq	r3, [r2, #0]
 80014ce:	e7c3      	b.n	8001458 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014d2:	6820      	ldr	r0, [r4, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80014da:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80014dc:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80014de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014e0:	3a01      	subs	r2, #1
 80014e2:	b292      	uxth	r2, r2
 80014e4:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80014e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014e8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80014ea:	1e51      	subs	r1, r2, #1
 80014ec:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014ee:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80014f0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014f2:	d50a      	bpl.n	800150a <HAL_I2C_Master_Transmit+0x15e>
 80014f4:	b149      	cbz	r1, 800150a <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014f6:	7859      	ldrb	r1, [r3, #1]
 80014f8:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80014fa:	3302      	adds	r3, #2
 80014fc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80014fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001500:	3b01      	subs	r3, #1
 8001502:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001504:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001506:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001508:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800150a:	4632      	mov	r2, r6
 800150c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff fe29 	bl	8001166 <I2C_WaitOnBTFFlagUntilTimeout>
 8001514:	2800      	cmp	r0, #0
 8001516:	d1d2      	bne.n	80014be <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8001518:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1c9      	bne.n	80014b2 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800151e:	6821      	ldr	r1, [r4, #0]
 8001520:	680a      	ldr	r2, [r1, #0]
 8001522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001526:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001528:	2220      	movs	r2, #32
 800152a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800152e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001532:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001536:	e747      	b.n	80013c8 <HAL_I2C_Master_Transmit+0x1c>
 8001538:	00100002 	.word	0x00100002
 800153c:	ffff0000 	.word	0xffff0000
 8001540:	00010002 	.word	0x00010002
 8001544:	00010008 	.word	0x00010008

08001548 <HAL_I2C_IsDeviceReady>:
{
 8001548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800154c:	4604      	mov	r4, r0
 800154e:	b085      	sub	sp, #20
 8001550:	4698      	mov	r8, r3
 8001552:	4689      	mov	r9, r1
 8001554:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8001556:	f7ff fc4f 	bl	8000df8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800155a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800155e:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001560:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001562:	d003      	beq.n	800156c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001564:	2002      	movs	r0, #2
}
 8001566:	b005      	add	sp, #20
 8001568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800156c:	9000      	str	r0, [sp, #0]
 800156e:	2319      	movs	r3, #25
 8001570:	2201      	movs	r2, #1
 8001572:	4948      	ldr	r1, [pc, #288]	; (8001694 <HAL_I2C_IsDeviceReady+0x14c>)
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff fe1c 	bl	80011b2 <I2C_WaitOnFlagUntilTimeout>
 800157a:	2800      	cmp	r0, #0
 800157c:	d1f2      	bne.n	8001564 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 800157e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001582:	2b01      	cmp	r3, #1
 8001584:	d0ee      	beq.n	8001564 <HAL_I2C_IsDeviceReady+0x1c>
 8001586:	2301      	movs	r3, #1
 8001588:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800158c:	6823      	ldr	r3, [r4, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800158e:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001694 <HAL_I2C_IsDeviceReady+0x14c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001596:	bf5e      	ittt	pl
 8001598:	681a      	ldrpl	r2, [r3, #0]
 800159a:	f042 0201 	orrpl.w	r2, r2, #1
 800159e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80015a8:	2324      	movs	r3, #36	; 0x24
 80015aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015b2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80015b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80015b8:	2701      	movs	r7, #1
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015ba:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015be:	6822      	ldr	r2, [r4, #0]
 80015c0:	6813      	ldr	r3, [r2, #0]
 80015c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80015c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015cc:	9500      	str	r5, [sp, #0]
 80015ce:	4643      	mov	r3, r8
 80015d0:	2200      	movs	r2, #0
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff fded 	bl	80011b2 <I2C_WaitOnFlagUntilTimeout>
 80015d8:	b108      	cbz	r0, 80015de <HAL_I2C_IsDeviceReady+0x96>
    return HAL_ERROR;
 80015da:	2001      	movs	r0, #1
 80015dc:	e7c3      	b.n	8001566 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80015e4:	f7ff fc08 	bl	8000df8 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015ec:	695b      	ldr	r3, [r3, #20]
      tickstart = HAL_GetTick();
 80015ee:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015f0:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015f4:	f3c3 2380 	ubfx	r3, r3, #10, #1
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80015f8:	26a0      	movs	r6, #160	; 0xa0
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80015fa:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80015fe:	29a0      	cmp	r1, #160	; 0xa0
 8001600:	d001      	beq.n	8001606 <HAL_I2C_IsDeviceReady+0xbe>
 8001602:	b902      	cbnz	r2, 8001606 <HAL_I2C_IsDeviceReady+0xbe>
 8001604:	b303      	cbz	r3, 8001648 <HAL_I2C_IsDeviceReady+0x100>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001606:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001608:	2620      	movs	r6, #32
 800160a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800160e:	695a      	ldr	r2, [r3, #20]
 8001610:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800161a:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800161c:	d026      	beq.n	800166c <HAL_I2C_IsDeviceReady+0x124>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161e:	2200      	movs	r2, #0
 8001620:	9203      	str	r2, [sp, #12]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	9203      	str	r2, [sp, #12]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	9303      	str	r3, [sp, #12]
 800162a:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800162c:	9500      	str	r5, [sp, #0]
 800162e:	2319      	movs	r3, #25
 8001630:	2201      	movs	r2, #1
 8001632:	4918      	ldr	r1, [pc, #96]	; (8001694 <HAL_I2C_IsDeviceReady+0x14c>)
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff fdbc 	bl	80011b2 <I2C_WaitOnFlagUntilTimeout>
 800163a:	2800      	cmp	r0, #0
 800163c:	d1cd      	bne.n	80015da <HAL_I2C_IsDeviceReady+0x92>
        hi2c->State = HAL_I2C_STATE_READY;
 800163e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001642:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001646:	e78e      	b.n	8001566 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001648:	f7ff fbd6 	bl	8000df8 <HAL_GetTick>
 800164c:	1b40      	subs	r0, r0, r5
 800164e:	4580      	cmp	r8, r0
 8001650:	d302      	bcc.n	8001658 <HAL_I2C_IsDeviceReady+0x110>
 8001652:	f1b8 0f00 	cmp.w	r8, #0
 8001656:	d101      	bne.n	800165c <HAL_I2C_IsDeviceReady+0x114>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001658:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001660:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001662:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001666:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800166a:	e7c6      	b.n	80015fa <HAL_I2C_IsDeviceReady+0xb2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800166c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001670:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001672:	4659      	mov	r1, fp
 8001674:	9500      	str	r5, [sp, #0]
 8001676:	2319      	movs	r3, #25
 8001678:	2201      	movs	r2, #1
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fd99 	bl	80011b2 <I2C_WaitOnFlagUntilTimeout>
 8001680:	2800      	cmp	r0, #0
 8001682:	d1aa      	bne.n	80015da <HAL_I2C_IsDeviceReady+0x92>
      I2C_Trials++;
 8001684:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8001686:	4557      	cmp	r7, sl
 8001688:	d399      	bcc.n	80015be <HAL_I2C_IsDeviceReady+0x76>
    hi2c->State = HAL_I2C_STATE_READY;
 800168a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800168e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8001692:	e7a2      	b.n	80015da <HAL_I2C_IsDeviceReady+0x92>
 8001694:	00100002 	.word	0x00100002

08001698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800169c:	4604      	mov	r4, r0
 800169e:	b918      	cbnz	r0, 80016a8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80016a0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80016a2:	b002      	add	sp, #8
 80016a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a8:	6803      	ldr	r3, [r0, #0]
 80016aa:	07dd      	lsls	r5, r3, #31
 80016ac:	d410      	bmi.n	80016d0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	0798      	lsls	r0, r3, #30
 80016b2:	d458      	bmi.n	8001766 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	071a      	lsls	r2, r3, #28
 80016b8:	f100 809a 	bmi.w	80017f0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	075b      	lsls	r3, r3, #29
 80016c0:	f100 80b8 	bmi.w	8001834 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c4:	69a2      	ldr	r2, [r4, #24]
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	f040 8119 	bne.w	80018fe <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80016cc:	2000      	movs	r0, #0
 80016ce:	e7e8      	b.n	80016a2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016d0:	4ba6      	ldr	r3, [pc, #664]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	f002 020c 	and.w	r2, r2, #12
 80016d8:	2a04      	cmp	r2, #4
 80016da:	d007      	beq.n	80016ec <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e2:	2a08      	cmp	r2, #8
 80016e4:	d10a      	bne.n	80016fc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	0259      	lsls	r1, r3, #9
 80016ea:	d507      	bpl.n	80016fc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	4b9f      	ldr	r3, [pc, #636]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	039a      	lsls	r2, r3, #14
 80016f2:	d5dc      	bpl.n	80016ae <HAL_RCC_OscConfig+0x16>
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1d9      	bne.n	80016ae <HAL_RCC_OscConfig+0x16>
 80016fa:	e7d1      	b.n	80016a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	6863      	ldr	r3, [r4, #4]
 80016fe:	4d9b      	ldr	r5, [pc, #620]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d111      	bne.n	800172a <HAL_RCC_OscConfig+0x92>
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800170e:	f7ff fb73 	bl	8000df8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4d96      	ldr	r5, [pc, #600]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001714:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	039b      	lsls	r3, r3, #14
 800171a:	d4c8      	bmi.n	80016ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fb6c 	bl	8000df8 <HAL_GetTick>
 8001720:	1b80      	subs	r0, r0, r6
 8001722:	2864      	cmp	r0, #100	; 0x64
 8001724:	d9f7      	bls.n	8001716 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001726:	2003      	movs	r0, #3
 8001728:	e7bb      	b.n	80016a2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172e:	d104      	bne.n	800173a <HAL_RCC_OscConfig+0xa2>
 8001730:	682b      	ldr	r3, [r5, #0]
 8001732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001736:	602b      	str	r3, [r5, #0]
 8001738:	e7e5      	b.n	8001706 <HAL_RCC_OscConfig+0x6e>
 800173a:	682a      	ldr	r2, [r5, #0]
 800173c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001740:	602a      	str	r2, [r5, #0]
 8001742:	682a      	ldr	r2, [r5, #0]
 8001744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001748:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1df      	bne.n	800170e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800174e:	f7ff fb53 	bl	8000df8 <HAL_GetTick>
 8001752:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	039f      	lsls	r7, r3, #14
 8001758:	d5a9      	bpl.n	80016ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175a:	f7ff fb4d 	bl	8000df8 <HAL_GetTick>
 800175e:	1b80      	subs	r0, r0, r6
 8001760:	2864      	cmp	r0, #100	; 0x64
 8001762:	d9f7      	bls.n	8001754 <HAL_RCC_OscConfig+0xbc>
 8001764:	e7df      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001766:	4b81      	ldr	r3, [pc, #516]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	f012 0f0c 	tst.w	r2, #12
 800176e:	d007      	beq.n	8001780 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001776:	2a08      	cmp	r2, #8
 8001778:	d111      	bne.n	800179e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	025e      	lsls	r6, r3, #9
 800177e:	d40e      	bmi.n	800179e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001780:	4b7a      	ldr	r3, [pc, #488]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	0795      	lsls	r5, r2, #30
 8001786:	d502      	bpl.n	800178e <HAL_RCC_OscConfig+0xf6>
 8001788:	68e2      	ldr	r2, [r4, #12]
 800178a:	2a01      	cmp	r2, #1
 800178c:	d188      	bne.n	80016a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6921      	ldr	r1, [r4, #16]
 8001792:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001796:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800179a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179c:	e78a      	b.n	80016b4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800179e:	68e2      	ldr	r2, [r4, #12]
 80017a0:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x2d8>)
 80017a2:	b1b2      	cbz	r2, 80017d2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb26 	bl	8000df8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	4d6f      	ldr	r5, [pc, #444]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	682b      	ldr	r3, [r5, #0]
 80017b2:	0798      	lsls	r0, r3, #30
 80017b4:	d507      	bpl.n	80017c6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	6922      	ldr	r2, [r4, #16]
 80017ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017c2:	602b      	str	r3, [r5, #0]
 80017c4:	e776      	b.n	80016b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff fb17 	bl	8000df8 <HAL_GetTick>
 80017ca:	1b80      	subs	r0, r0, r6
 80017cc:	2802      	cmp	r0, #2
 80017ce:	d9ef      	bls.n	80017b0 <HAL_RCC_OscConfig+0x118>
 80017d0:	e7a9      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80017d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb10 	bl	8000df8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d8:	4d64      	ldr	r5, [pc, #400]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017dc:	682b      	ldr	r3, [r5, #0]
 80017de:	0799      	lsls	r1, r3, #30
 80017e0:	f57f af68 	bpl.w	80016b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fb08 	bl	8000df8 <HAL_GetTick>
 80017e8:	1b80      	subs	r0, r0, r6
 80017ea:	2802      	cmp	r0, #2
 80017ec:	d9f6      	bls.n	80017dc <HAL_RCC_OscConfig+0x144>
 80017ee:	e79a      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017f0:	6962      	ldr	r2, [r4, #20]
 80017f2:	4b60      	ldr	r3, [pc, #384]	; (8001974 <HAL_RCC_OscConfig+0x2dc>)
 80017f4:	b17a      	cbz	r2, 8001816 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017fa:	f7ff fafd 	bl	8000df8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4d5b      	ldr	r5, [pc, #364]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001800:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001804:	079f      	lsls	r7, r3, #30
 8001806:	f53f af59 	bmi.w	80016bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff faf5 	bl	8000df8 <HAL_GetTick>
 800180e:	1b80      	subs	r0, r0, r6
 8001810:	2802      	cmp	r0, #2
 8001812:	d9f6      	bls.n	8001802 <HAL_RCC_OscConfig+0x16a>
 8001814:	e787      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001816:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001818:	f7ff faee 	bl	8000df8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	4d53      	ldr	r5, [pc, #332]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800181e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001822:	0798      	lsls	r0, r3, #30
 8001824:	f57f af4a 	bpl.w	80016bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff fae6 	bl	8000df8 <HAL_GetTick>
 800182c:	1b80      	subs	r0, r0, r6
 800182e:	2802      	cmp	r0, #2
 8001830:	d9f6      	bls.n	8001820 <HAL_RCC_OscConfig+0x188>
 8001832:	e778      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001834:	4b4d      	ldr	r3, [pc, #308]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
 8001836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001838:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800183c:	d128      	bne.n	8001890 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	9201      	str	r2, [sp, #4]
 8001840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001842:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001852:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	4d48      	ldr	r5, [pc, #288]	; (8001978 <HAL_RCC_OscConfig+0x2e0>)
 8001856:	682b      	ldr	r3, [r5, #0]
 8001858:	05d9      	lsls	r1, r3, #23
 800185a:	d51b      	bpl.n	8001894 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	68a3      	ldr	r3, [r4, #8]
 800185e:	4d43      	ldr	r5, [pc, #268]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
 8001860:	2b01      	cmp	r3, #1
 8001862:	d127      	bne.n	80018b4 <HAL_RCC_OscConfig+0x21c>
 8001864:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800186c:	f7ff fac4 	bl	8000df8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	4d3e      	ldr	r5, [pc, #248]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001872:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001878:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800187a:	079b      	lsls	r3, r3, #30
 800187c:	d539      	bpl.n	80018f2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800187e:	2e00      	cmp	r6, #0
 8001880:	f43f af20 	beq.w	80016c4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4a39      	ldr	r2, [pc, #228]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
 8001886:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	e719      	b.n	80016c4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001890:	2600      	movs	r6, #0
 8001892:	e7df      	b.n	8001854 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800189c:	f7ff faac 	bl	8000df8 <HAL_GetTick>
 80018a0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	682b      	ldr	r3, [r5, #0]
 80018a4:	05da      	lsls	r2, r3, #23
 80018a6:	d4d9      	bmi.n	800185c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a8:	f7ff faa6 	bl	8000df8 <HAL_GetTick>
 80018ac:	1bc0      	subs	r0, r0, r7
 80018ae:	2802      	cmp	r0, #2
 80018b0:	d9f7      	bls.n	80018a2 <HAL_RCC_OscConfig+0x20a>
 80018b2:	e738      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d104      	bne.n	80018c2 <HAL_RCC_OscConfig+0x22a>
 80018b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	672b      	str	r3, [r5, #112]	; 0x70
 80018c0:	e7d0      	b.n	8001864 <HAL_RCC_OscConfig+0x1cc>
 80018c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	672a      	str	r2, [r5, #112]	; 0x70
 80018ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018cc:	f022 0204 	bic.w	r2, r2, #4
 80018d0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ca      	bne.n	800186c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80018d6:	f7ff fa8f 	bl	8000df8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018e2:	0798      	lsls	r0, r3, #30
 80018e4:	d5cb      	bpl.n	800187e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa87 	bl	8000df8 <HAL_GetTick>
 80018ea:	1bc0      	subs	r0, r0, r7
 80018ec:	4540      	cmp	r0, r8
 80018ee:	d9f7      	bls.n	80018e0 <HAL_RCC_OscConfig+0x248>
 80018f0:	e719      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff fa81 	bl	8000df8 <HAL_GetTick>
 80018f6:	1bc0      	subs	r0, r0, r7
 80018f8:	4540      	cmp	r0, r8
 80018fa:	d9bd      	bls.n	8001878 <HAL_RCC_OscConfig+0x1e0>
 80018fc:	e713      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018fe:	4d1b      	ldr	r5, [pc, #108]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
 8001900:	68ab      	ldr	r3, [r5, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b08      	cmp	r3, #8
 8001908:	f43f aeca 	beq.w	80016a0 <HAL_RCC_OscConfig+0x8>
 800190c:	4e1b      	ldr	r6, [pc, #108]	; (800197c <HAL_RCC_OscConfig+0x2e4>)
 800190e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001910:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001912:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001914:	d134      	bne.n	8001980 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001916:	f7ff fa6f 	bl	8000df8 <HAL_GetTick>
 800191a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	0199      	lsls	r1, r3, #6
 8001920:	d41e      	bmi.n	8001960 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001922:	6a22      	ldr	r2, [r4, #32]
 8001924:	69e3      	ldr	r3, [r4, #28]
 8001926:	4313      	orrs	r3, r2
 8001928:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800192a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800192e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001930:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001934:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4c0d      	ldr	r4, [pc, #52]	; (800196c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001938:	0852      	lsrs	r2, r2, #1
 800193a:	3a01      	subs	r2, #1
 800193c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001940:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001942:	2301      	movs	r3, #1
 8001944:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001946:	f7ff fa57 	bl	8000df8 <HAL_GetTick>
 800194a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	019a      	lsls	r2, r3, #6
 8001950:	f53f aebc 	bmi.w	80016cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff fa50 	bl	8000df8 <HAL_GetTick>
 8001958:	1b40      	subs	r0, r0, r5
 800195a:	2802      	cmp	r0, #2
 800195c:	d9f6      	bls.n	800194c <HAL_RCC_OscConfig+0x2b4>
 800195e:	e6e2      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff fa4a 	bl	8000df8 <HAL_GetTick>
 8001964:	1bc0      	subs	r0, r0, r7
 8001966:	2802      	cmp	r0, #2
 8001968:	d9d8      	bls.n	800191c <HAL_RCC_OscConfig+0x284>
 800196a:	e6dc      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
 800196c:	40023800 	.word	0x40023800
 8001970:	42470000 	.word	0x42470000
 8001974:	42470e80 	.word	0x42470e80
 8001978:	40007000 	.word	0x40007000
 800197c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001980:	f7ff fa3a 	bl	8000df8 <HAL_GetTick>
 8001984:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	f57f ae9f 	bpl.w	80016cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff fa33 	bl	8000df8 <HAL_GetTick>
 8001992:	1b00      	subs	r0, r0, r4
 8001994:	2802      	cmp	r0, #2
 8001996:	d9f6      	bls.n	8001986 <HAL_RCC_OscConfig+0x2ee>
 8001998:	e6c5      	b.n	8001726 <HAL_RCC_OscConfig+0x8e>
 800199a:	bf00      	nop

0800199c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199c:	4913      	ldr	r1, [pc, #76]	; (80019ec <HAL_RCC_GetSysClockFreq+0x50>)
{
 800199e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a0:	688b      	ldr	r3, [r1, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x16>
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ae:	4810      	ldr	r0, [pc, #64]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019b0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80019b2:	4810      	ldr	r0, [pc, #64]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x58>)
 80019b4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c0:	bf14      	ite	ne
 80019c2:	480c      	ldrne	r0, [pc, #48]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c4:	480a      	ldreq	r0, [pc, #40]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019ca:	bf18      	it	ne
 80019cc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d2:	fba1 0100 	umull	r0, r1, r1, r0
 80019d6:	f7ff f83d 	bl	8000a54 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <HAL_RCC_GetSysClockFreq+0x50>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019e2:	3301      	adds	r3, #1
 80019e4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80019e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80019ea:	bd08      	pop	{r3, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	00f42400 	.word	0x00f42400
 80019f4:	007a1200 	.word	0x007a1200

080019f8 <HAL_RCC_ClockConfig>:
{
 80019f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019fc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80019fe:	4604      	mov	r4, r0
 8001a00:	b910      	cbnz	r0, 8001a08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a02:	2001      	movs	r0, #1
 8001a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <HAL_RCC_ClockConfig+0x124>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	f002 020f 	and.w	r2, r2, #15
 8001a10:	428a      	cmp	r2, r1
 8001a12:	d328      	bcc.n	8001a66 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a14:	6821      	ldr	r1, [r4, #0]
 8001a16:	078f      	lsls	r7, r1, #30
 8001a18:	d42d      	bmi.n	8001a76 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	07c8      	lsls	r0, r1, #31
 8001a1c:	d440      	bmi.n	8001aa0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_RCC_ClockConfig+0x124>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	f002 020f 	and.w	r2, r2, #15
 8001a26:	4295      	cmp	r5, r2
 8001a28:	d366      	bcc.n	8001af8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2a:	6822      	ldr	r2, [r4, #0]
 8001a2c:	0751      	lsls	r1, r2, #29
 8001a2e:	d46c      	bmi.n	8001b0a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	0713      	lsls	r3, r2, #28
 8001a32:	d507      	bpl.n	8001a44 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a34:	4a3a      	ldr	r2, [pc, #232]	; (8001b20 <HAL_RCC_ClockConfig+0x128>)
 8001a36:	6921      	ldr	r1, [r4, #16]
 8001a38:	6893      	ldr	r3, [r2, #8]
 8001a3a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a44:	f7ff ffaa 	bl	800199c <HAL_RCC_GetSysClockFreq>
 8001a48:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <HAL_RCC_ClockConfig+0x128>)
 8001a4a:	4a36      	ldr	r2, [pc, #216]	; (8001b24 <HAL_RCC_ClockConfig+0x12c>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	40d8      	lsrs	r0, r3
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_ClockConfig+0x130>)
 8001a58:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff f982 	bl	8000d64 <HAL_InitTick>
  return HAL_OK;
 8001a60:	2000      	movs	r0, #0
 8001a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	4299      	cmp	r1, r3
 8001a72:	d1c6      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xa>
 8001a74:	e7ce      	b.n	8001a14 <HAL_RCC_ClockConfig+0x1c>
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	bf1e      	ittt	ne
 8001a7e:	689a      	ldrne	r2, [r3, #8]
 8001a80:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001a84:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a88:	bf42      	ittt	mi
 8001a8a:	689a      	ldrmi	r2, [r3, #8]
 8001a8c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001a90:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	68a0      	ldr	r0, [r4, #8]
 8001a96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a9a:	4302      	orrs	r2, r0
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	e7bc      	b.n	8001a1a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa0:	6862      	ldr	r2, [r4, #4]
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_RCC_ClockConfig+0x128>)
 8001aa4:	2a01      	cmp	r2, #1
 8001aa6:	d11d      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	d0a8      	beq.n	8001a02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab0:	4e1b      	ldr	r6, [pc, #108]	; (8001b20 <HAL_RCC_ClockConfig+0x128>)
 8001ab2:	68b3      	ldr	r3, [r6, #8]
 8001ab4:	f023 0303 	bic.w	r3, r3, #3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001abc:	f7ff f99c 	bl	8000df8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ac4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	68b3      	ldr	r3, [r6, #8]
 8001ac8:	6862      	ldr	r2, [r4, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ad2:	d0a4      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff f990 	bl	8000df8 <HAL_GetTick>
 8001ad8:	1bc0      	subs	r0, r0, r7
 8001ada:	4540      	cmp	r0, r8
 8001adc:	d9f3      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001ade:	2003      	movs	r0, #3
}
 8001ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae4:	1e91      	subs	r1, r2, #2
 8001ae6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aea:	d802      	bhi.n	8001af2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001af0:	e7dd      	b.n	8001aae <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	f013 0f02 	tst.w	r3, #2
 8001af6:	e7da      	b.n	8001aae <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af8:	b2ea      	uxtb	r2, r5
 8001afa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	429d      	cmp	r5, r3
 8001b04:	f47f af7d 	bne.w	8001a02 <HAL_RCC_ClockConfig+0xa>
 8001b08:	e78f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0a:	4905      	ldr	r1, [pc, #20]	; (8001b20 <HAL_RCC_ClockConfig+0x128>)
 8001b0c:	68e0      	ldr	r0, [r4, #12]
 8001b0e:	688b      	ldr	r3, [r1, #8]
 8001b10:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b14:	4303      	orrs	r3, r0
 8001b16:	608b      	str	r3, [r1, #8]
 8001b18:	e78a      	b.n	8001a30 <HAL_RCC_ClockConfig+0x38>
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00
 8001b20:	40023800 	.word	0x40023800
 8001b24:	0800428d 	.word	0x0800428d
 8001b28:	20000010 	.word	0x20000010

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	4a03      	ldr	r2, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b3a:	6810      	ldr	r0, [r2, #0]
}
 8001b3c:	40d8      	lsrs	r0, r3
 8001b3e:	4770      	bx	lr
 8001b40:	40023800 	.word	0x40023800
 8001b44:	0800429d 	.word	0x0800429d
 8001b48:	20000010 	.word	0x20000010

08001b4c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b5a:	6810      	ldr	r0, [r2, #0]
}
 8001b5c:	40d8      	lsrs	r0, r3
 8001b5e:	4770      	bx	lr
 8001b60:	40023800 	.word	0x40023800
 8001b64:	0800429d 	.word	0x0800429d
 8001b68:	20000010 	.word	0x20000010

08001b6c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_GetClockConfig+0x34>)
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	f002 0203 	and.w	r2, r2, #3
 8001b78:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001b80:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001b88:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b92:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetClockConfig+0x38>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	600b      	str	r3, [r1, #0]
 8001b9e:	4770      	bx	lr
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40023c00 	.word	0x40023c00

08001ba8 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001baa:	4604      	mov	r4, r0
 8001bac:	460e      	mov	r6, r1
 8001bae:	4615      	mov	r5, r2
 8001bb0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bb2:	6821      	ldr	r1, [r4, #0]
 8001bb4:	688a      	ldr	r2, [r1, #8]
 8001bb6:	ea36 0302 	bics.w	r3, r6, r2
 8001bba:	d001      	beq.n	8001bc0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001bbc:	2000      	movs	r0, #0
}
 8001bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001bc0:	1c6b      	adds	r3, r5, #1
 8001bc2:	d0f7      	beq.n	8001bb4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001bc4:	f7ff f918 	bl	8000df8 <HAL_GetTick>
 8001bc8:	1bc0      	subs	r0, r0, r7
 8001bca:	4285      	cmp	r5, r0
 8001bcc:	d8f1      	bhi.n	8001bb2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001bd6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bd8:	6862      	ldr	r2, [r4, #4]
 8001bda:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001bde:	d10a      	bne.n	8001bf6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8001be0:	68a2      	ldr	r2, [r4, #8]
 8001be2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001be6:	d002      	beq.n	8001bee <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001be8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001bec:	d103      	bne.n	8001bf6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bf4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bf6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bf8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001bfc:	d107      	bne.n	8001c0e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c0c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001c14:	2300      	movs	r3, #0
 8001c16:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c22:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c24:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <SPI_EndRxTxTransaction+0x54>)
 8001c26:	4e14      	ldr	r6, [pc, #80]	; (8001c78 <SPI_EndRxTxTransaction+0x58>)
 8001c28:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c2a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c2c:	fbb5 f6f6 	udiv	r6, r5, r6
 8001c30:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001c34:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c36:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8001c3a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c3c:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c3e:	d10d      	bne.n	8001c5c <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c40:	460a      	mov	r2, r1
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	f7ff ffb0 	bl	8001ba8 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001c48:	b910      	cbnz	r0, 8001c50 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8001c4a:	2000      	movs	r0, #0
}
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c52:	f043 0320 	orr.w	r3, r3, #32
 8001c56:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c58:	2003      	movs	r0, #3
 8001c5a:	e7f7      	b.n	8001c4c <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8001c5c:	9b01      	ldr	r3, [sp, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f3      	beq.n	8001c4a <SPI_EndRxTxTransaction+0x2a>
      count--;
 8001c62:	9b01      	ldr	r3, [sp, #4]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	d4f5      	bmi.n	8001c5c <SPI_EndRxTxTransaction+0x3c>
 8001c70:	e7eb      	b.n	8001c4a <SPI_EndRxTxTransaction+0x2a>
 8001c72:	bf00      	nop
 8001c74:	20000010 	.word	0x20000010
 8001c78:	016e3600 	.word	0x016e3600

08001c7c <HAL_SPI_Init>:
{
 8001c7c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001c7e:	4604      	mov	r4, r0
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d036      	beq.n	8001cf2 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c88:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001c8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c90:	b91b      	cbnz	r3, 8001c9a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001c92:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001c96:	f001 fc39 	bl	800350c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001c9a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c9c:	68a0      	ldr	r0, [r4, #8]
 8001c9e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001ca6:	680b      	ldr	r3, [r1, #0]
 8001ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cac:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	4303      	orrs	r3, r0
 8001cb2:	68e0      	ldr	r0, [r4, #12]
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	6920      	ldr	r0, [r4, #16]
 8001cb8:	4303      	orrs	r3, r0
 8001cba:	6960      	ldr	r0, [r4, #20]
 8001cbc:	4303      	orrs	r3, r0
 8001cbe:	69e0      	ldr	r0, [r4, #28]
 8001cc0:	4303      	orrs	r3, r0
 8001cc2:	6a20      	ldr	r0, [r4, #32]
 8001cc4:	4303      	orrs	r3, r0
 8001cc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001cc8:	4303      	orrs	r3, r0
 8001cca:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001cce:	4303      	orrs	r3, r0
 8001cd0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001cd2:	0c12      	lsrs	r2, r2, #16
 8001cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cd6:	f002 0204 	and.w	r2, r2, #4
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cde:	69cb      	ldr	r3, [r1, #28]
 8001ce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ce4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ce6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001ce8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cea:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001cf0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001cf2:	2001      	movs	r0, #1
}
 8001cf4:	bd10      	pop	{r4, pc}

08001cf6 <HAL_SPI_TransmitReceive>:
{
 8001cf6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001cfa:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001cfc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001d00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001d02:	2b01      	cmp	r3, #1
{
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
 8001d08:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001d0a:	f000 80e2 	beq.w	8001ed2 <HAL_SPI_TransmitReceive+0x1dc>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001d14:	f7ff f870 	bl	8000df8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001d18:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001d1c:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001d1e:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d20:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001d22:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d24:	d00a      	beq.n	8001d3c <HAL_SPI_TransmitReceive+0x46>
 8001d26:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001d2a:	f040 80d0 	bne.w	8001ece <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d2e:	68a0      	ldr	r0, [r4, #8]
 8001d30:	2800      	cmp	r0, #0
 8001d32:	f040 80cc 	bne.w	8001ece <HAL_SPI_TransmitReceive+0x1d8>
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	f040 80c9 	bne.w	8001ece <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d3c:	2d00      	cmp	r5, #0
 8001d3e:	f000 80c4 	beq.w	8001eca <HAL_SPI_TransmitReceive+0x1d4>
 8001d42:	f1b9 0f00 	cmp.w	r9, #0
 8001d46:	f000 80c0 	beq.w	8001eca <HAL_SPI_TransmitReceive+0x1d4>
 8001d4a:	2e00      	cmp	r6, #0
 8001d4c:	f000 80bd 	beq.w	8001eca <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d50:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d54:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d58:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d5a:	bf1c      	itt	ne
 8001d5c:	2305      	movne	r3, #5
 8001d5e:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001d66:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d68:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d6a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001d6c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001d6e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d70:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001d72:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d74:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001d76:	bf58      	it	pl
 8001d78:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d7a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001d7c:	bf58      	it	pl
 8001d7e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001d82:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001d84:	bf58      	it	pl
 8001d86:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d88:	68e2      	ldr	r2, [r4, #12]
 8001d8a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001d8e:	d158      	bne.n	8001e42 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d90:	b109      	cbz	r1, 8001d96 <HAL_SPI_TransmitReceive+0xa0>
 8001d92:	2e01      	cmp	r6, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d96:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001d9a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001d9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d9e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001da6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001da8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	b9ab      	cbnz	r3, 8001dda <HAL_SPI_TransmitReceive+0xe4>
 8001dae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	b993      	cbnz	r3, 8001dda <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001db4:	4642      	mov	r2, r8
 8001db6:	4639      	mov	r1, r7
 8001db8:	4620      	mov	r0, r4
 8001dba:	f7ff ff31 	bl	8001c20 <SPI_EndRxTxTransaction>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	f040 8081 	bne.w	8001ec6 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dc4:	68a3      	ldr	r3, [r4, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d132      	bne.n	8001e30 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	9001      	str	r0, [sp, #4]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	9201      	str	r2, [sp, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	e02a      	b.n	8001e30 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dda:	6822      	ldr	r2, [r4, #0]
 8001ddc:	6893      	ldr	r3, [r2, #8]
 8001dde:	0799      	lsls	r1, r3, #30
 8001de0:	d50d      	bpl.n	8001dfe <HAL_SPI_TransmitReceive+0x108>
 8001de2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b153      	cbz	r3, 8001dfe <HAL_SPI_TransmitReceive+0x108>
 8001de8:	b14d      	cbz	r5, 8001dfe <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001dec:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001df0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001df4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001dfc:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dfe:	6893      	ldr	r3, [r2, #8]
 8001e00:	07db      	lsls	r3, r3, #31
 8001e02:	d50c      	bpl.n	8001e1e <HAL_SPI_TransmitReceive+0x128>
 8001e04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b14b      	cbz	r3, 8001e1e <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e0c:	68d2      	ldr	r2, [r2, #12]
 8001e0e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e12:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001e14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001e1c:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e1e:	f7fe ffeb 	bl	8000df8 <HAL_GetTick>
 8001e22:	eba0 0008 	sub.w	r0, r0, r8
 8001e26:	4287      	cmp	r7, r0
 8001e28:	d8be      	bhi.n	8001da8 <HAL_SPI_TransmitReceive+0xb2>
 8001e2a:	1c7e      	adds	r6, r7, #1
 8001e2c:	d0bc      	beq.n	8001da8 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001e2e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e36:	2300      	movs	r3, #0
 8001e38:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001e3c:	b003      	add	sp, #12
 8001e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e42:	b109      	cbz	r1, 8001e48 <HAL_SPI_TransmitReceive+0x152>
 8001e44:	2e01      	cmp	r6, #1
 8001e46:	d108      	bne.n	8001e5a <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e48:	782a      	ldrb	r2, [r5, #0]
 8001e4a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e4e:	3301      	adds	r3, #1
 8001e50:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001e52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001e5a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	b91b      	cbnz	r3, 8001e6a <HAL_SPI_TransmitReceive+0x174>
 8001e62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0a4      	beq.n	8001db4 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e6a:	6822      	ldr	r2, [r4, #0]
 8001e6c:	6893      	ldr	r3, [r2, #8]
 8001e6e:	0798      	lsls	r0, r3, #30
 8001e70:	d50e      	bpl.n	8001e90 <HAL_SPI_TransmitReceive+0x19a>
 8001e72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b15b      	cbz	r3, 8001e90 <HAL_SPI_TransmitReceive+0x19a>
 8001e78:	b155      	cbz	r5, 8001e90 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001e80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e82:	3301      	adds	r3, #1
 8001e84:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001e8e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e90:	6822      	ldr	r2, [r4, #0]
 8001e92:	6893      	ldr	r3, [r2, #8]
 8001e94:	07d9      	lsls	r1, r3, #31
 8001e96:	d50d      	bpl.n	8001eb4 <HAL_SPI_TransmitReceive+0x1be>
 8001e98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	b153      	cbz	r3, 8001eb4 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ea0:	68d2      	ldr	r2, [r2, #12]
 8001ea2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001eaa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001eb2:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001eb4:	f7fe ffa0 	bl	8000df8 <HAL_GetTick>
 8001eb8:	eba0 0008 	sub.w	r0, r0, r8
 8001ebc:	4287      	cmp	r7, r0
 8001ebe:	d8cd      	bhi.n	8001e5c <HAL_SPI_TransmitReceive+0x166>
 8001ec0:	1c7b      	adds	r3, r7, #1
 8001ec2:	d0cb      	beq.n	8001e5c <HAL_SPI_TransmitReceive+0x166>
 8001ec4:	e7b3      	b.n	8001e2e <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001eca:	2001      	movs	r0, #1
 8001ecc:	e7b0      	b.n	8001e30 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8001ece:	2002      	movs	r0, #2
 8001ed0:	e7ae      	b.n	8001e30 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	e7b2      	b.n	8001e3c <HAL_SPI_TransmitReceive+0x146>
	...

08001ed8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ed8:	6a03      	ldr	r3, [r0, #32]
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ee0:	6a03      	ldr	r3, [r0, #32]
{
 8001ee2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ee4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ee6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ee8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001eea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001eee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ef0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001ef2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001ef6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ef8:	4d0a      	ldr	r5, [pc, #40]	; (8001f24 <TIM_OC1_SetConfig+0x4c>)
 8001efa:	42a8      	cmp	r0, r5
 8001efc:	d10b      	bne.n	8001f16 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001efe:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f00:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f02:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001f06:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f08:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f0a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f0e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f10:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f14:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f16:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f18:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f1a:	684a      	ldr	r2, [r1, #4]
 8001f1c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f1e:	6203      	str	r3, [r0, #32]
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000

08001f28 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f28:	6a03      	ldr	r3, [r0, #32]
 8001f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f2e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f30:	6a03      	ldr	r3, [r0, #32]
{
 8001f32:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f36:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f3a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f3e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f40:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001f42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f4a:	4d0b      	ldr	r5, [pc, #44]	; (8001f78 <TIM_OC3_SetConfig+0x50>)
 8001f4c:	42a8      	cmp	r0, r5
 8001f4e:	d10d      	bne.n	8001f6c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f50:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f52:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f58:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f5c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f5e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f62:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f68:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f6c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f6e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f70:	684a      	ldr	r2, [r1, #4]
 8001f72:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f74:	6203      	str	r3, [r0, #32]
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
 8001f78:	40010000 	.word	0x40010000

08001f7c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f7c:	6a03      	ldr	r3, [r0, #32]
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f84:	6a03      	ldr	r3, [r0, #32]
{
 8001f86:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f8a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f8e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f92:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f96:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f9c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fa0:	4d06      	ldr	r5, [pc, #24]	; (8001fbc <TIM_OC4_SetConfig+0x40>)
 8001fa2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fa4:	bf02      	ittt	eq
 8001fa6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fa8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fac:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fb0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fb2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fb4:	684a      	ldr	r2, [r1, #4]
 8001fb6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fb8:	6203      	str	r3, [r0, #32]
 8001fba:	bd30      	pop	{r4, r5, pc}
 8001fbc:	40010000 	.word	0x40010000

08001fc0 <HAL_TIM_PWM_MspInit>:
 8001fc0:	4770      	bx	lr
	...

08001fc4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc4:	4a24      	ldr	r2, [pc, #144]	; (8002058 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001fc6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc8:	4290      	cmp	r0, r2
 8001fca:	d00e      	beq.n	8001fea <TIM_Base_SetConfig+0x26>
 8001fcc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fd0:	d00b      	beq.n	8001fea <TIM_Base_SetConfig+0x26>
 8001fd2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fd6:	4290      	cmp	r0, r2
 8001fd8:	d007      	beq.n	8001fea <TIM_Base_SetConfig+0x26>
 8001fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fde:	4290      	cmp	r0, r2
 8001fe0:	d003      	beq.n	8001fea <TIM_Base_SetConfig+0x26>
 8001fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe6:	4290      	cmp	r0, r2
 8001fe8:	d115      	bne.n	8002016 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001fea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ff0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff2:	4a19      	ldr	r2, [pc, #100]	; (8002058 <TIM_Base_SetConfig+0x94>)
 8001ff4:	4290      	cmp	r0, r2
 8001ff6:	d019      	beq.n	800202c <TIM_Base_SetConfig+0x68>
 8001ff8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ffc:	d016      	beq.n	800202c <TIM_Base_SetConfig+0x68>
 8001ffe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002002:	4290      	cmp	r0, r2
 8002004:	d012      	beq.n	800202c <TIM_Base_SetConfig+0x68>
 8002006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800200a:	4290      	cmp	r0, r2
 800200c:	d00e      	beq.n	800202c <TIM_Base_SetConfig+0x68>
 800200e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002012:	4290      	cmp	r0, r2
 8002014:	d00a      	beq.n	800202c <TIM_Base_SetConfig+0x68>
 8002016:	4a11      	ldr	r2, [pc, #68]	; (800205c <TIM_Base_SetConfig+0x98>)
 8002018:	4290      	cmp	r0, r2
 800201a:	d007      	beq.n	800202c <TIM_Base_SetConfig+0x68>
 800201c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002020:	4290      	cmp	r0, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x68>
 8002024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002028:	4290      	cmp	r0, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800202c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800202e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002032:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002034:	694a      	ldr	r2, [r1, #20]
 8002036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800203a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800203c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800203e:	688b      	ldr	r3, [r1, #8]
 8002040:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002042:	680b      	ldr	r3, [r1, #0]
 8002044:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <TIM_Base_SetConfig+0x94>)
 8002048:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800204a:	bf04      	itt	eq
 800204c:	690b      	ldreq	r3, [r1, #16]
 800204e:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002050:	2301      	movs	r3, #1
 8002052:	6143      	str	r3, [r0, #20]
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40010000 	.word	0x40010000
 800205c:	40014000 	.word	0x40014000

08002060 <HAL_TIM_Base_Init>:
{
 8002060:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002062:	4604      	mov	r4, r0
 8002064:	b1a0      	cbz	r0, 8002090 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002066:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800206a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800206e:	b91b      	cbnz	r3, 8002078 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002070:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002074:	f001 fa96 	bl	80035a4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	2302      	movs	r3, #2
 800207a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800207e:	6820      	ldr	r0, [r4, #0]
 8002080:	1d21      	adds	r1, r4, #4
 8002082:	f7ff ff9f 	bl	8001fc4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002086:	2301      	movs	r3, #1
 8002088:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800208c:	2000      	movs	r0, #0
 800208e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002090:	2001      	movs	r0, #1
}
 8002092:	bd10      	pop	{r4, pc}

08002094 <HAL_TIM_PWM_Init>:
{
 8002094:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002096:	4604      	mov	r4, r0
 8002098:	b1a0      	cbz	r0, 80020c4 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800209a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800209e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020a2:	b91b      	cbnz	r3, 80020ac <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80020a8:	f7ff ff8a 	bl	8001fc0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	2302      	movs	r3, #2
 80020ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b2:	6820      	ldr	r0, [r4, #0]
 80020b4:	1d21      	adds	r1, r4, #4
 80020b6:	f7ff ff85 	bl	8001fc4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020c0:	2000      	movs	r0, #0
 80020c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020c4:	2001      	movs	r0, #1
}
 80020c6:	bd10      	pop	{r4, pc}

080020c8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c8:	6a03      	ldr	r3, [r0, #32]
 80020ca:	f023 0310 	bic.w	r3, r3, #16
 80020ce:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80020d0:	6a03      	ldr	r3, [r0, #32]
{
 80020d2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80020d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80020d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80020e4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020ec:	4d0b      	ldr	r5, [pc, #44]	; (800211c <TIM_OC2_SetConfig+0x54>)
 80020ee:	42a8      	cmp	r0, r5
 80020f0:	d10d      	bne.n	800210e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020f2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020f4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80020f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020fe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002100:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002104:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800210a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800210e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002110:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002112:	684a      	ldr	r2, [r1, #4]
 8002114:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002116:	6203      	str	r3, [r0, #32]
 8002118:	bd70      	pop	{r4, r5, r6, pc}
 800211a:	bf00      	nop
 800211c:	40010000 	.word	0x40010000

08002120 <HAL_TIM_PWM_ConfigChannel>:
{
 8002120:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002122:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002126:	2b01      	cmp	r3, #1
{
 8002128:	4604      	mov	r4, r0
 800212a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800212e:	d025      	beq.n	800217c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002130:	2301      	movs	r3, #1
 8002132:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002136:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800213a:	2a0c      	cmp	r2, #12
 800213c:	d818      	bhi.n	8002170 <HAL_TIM_PWM_ConfigChannel+0x50>
 800213e:	e8df f002 	tbb	[pc, r2]
 8002142:	1707      	.short	0x1707
 8002144:	171e1717 	.word	0x171e1717
 8002148:	172f1717 	.word	0x172f1717
 800214c:	1717      	.short	0x1717
 800214e:	40          	.byte	0x40
 800214f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002150:	6820      	ldr	r0, [r4, #0]
 8002152:	f7ff fec1 	bl	8001ed8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002156:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002158:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	f042 0208 	orr.w	r2, r2, #8
 8002160:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	f022 0204 	bic.w	r2, r2, #4
 8002168:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800216e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002170:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002172:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002174:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002178:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800217c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800217e:	6820      	ldr	r0, [r4, #0]
 8002180:	f7ff ffa2 	bl	80020c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002184:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002186:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800219e:	e7e6      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021a0:	6820      	ldr	r0, [r4, #0]
 80021a2:	f7ff fec1 	bl	8001f28 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	f042 0208 	orr.w	r2, r2, #8
 80021b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	f022 0204 	bic.w	r2, r2, #4
 80021b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021be:	61da      	str	r2, [r3, #28]
      break;
 80021c0:	e7d6      	b.n	8002170 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021c2:	6820      	ldr	r0, [r4, #0]
 80021c4:	f7ff feda 	bl	8001f7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021ca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021e2:	e7ec      	b.n	80021be <HAL_TIM_PWM_ConfigChannel+0x9e>

080021e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021e4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021e6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ea:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80021f2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f4:	6083      	str	r3, [r0, #8]
 80021f6:	bd10      	pop	{r4, pc}

080021f8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80021f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021fc:	2b01      	cmp	r3, #1
{
 80021fe:	b570      	push	{r4, r5, r6, lr}
 8002200:	4604      	mov	r4, r0
 8002202:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002206:	d019      	beq.n	800223c <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800220c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800220e:	2301      	movs	r3, #1
 8002210:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002214:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800221a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800221e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002220:	680b      	ldr	r3, [r1, #0]
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d065      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0xfa>
 8002226:	d815      	bhi.n	8002254 <HAL_TIM_ConfigClockSource+0x5c>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d00c      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x4e>
 800222c:	d807      	bhi.n	800223e <HAL_TIM_ConfigClockSource+0x46>
 800222e:	b153      	cbz	r3, 8002246 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002230:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002232:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002234:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002238:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800223c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800223e:	2b20      	cmp	r3, #32
 8002240:	d001      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x4e>
 8002242:	2b30      	cmp	r3, #48	; 0x30
 8002244:	d1f4      	bne.n	8002230 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002246:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002248:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800224c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002250:	4313      	orrs	r3, r2
 8002252:	e01a      	b.n	800228a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002254:	2b60      	cmp	r3, #96	; 0x60
 8002256:	d034      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0xca>
 8002258:	d819      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x96>
 800225a:	2b50      	cmp	r3, #80	; 0x50
 800225c:	d1e8      	bne.n	8002230 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800225e:	684a      	ldr	r2, [r1, #4]
 8002260:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002262:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002264:	6a05      	ldr	r5, [r0, #32]
 8002266:	f025 0501 	bic.w	r5, r5, #1
 800226a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800226c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800226e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002276:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800227a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800227c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800227e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002280:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002286:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800228a:	6083      	str	r3, [r0, #8]
 800228c:	e7d0      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800228e:	2b70      	cmp	r3, #112	; 0x70
 8002290:	d00c      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0xb4>
 8002292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002296:	d1cb      	bne.n	8002230 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002298:	68cb      	ldr	r3, [r1, #12]
 800229a:	684a      	ldr	r2, [r1, #4]
 800229c:	6889      	ldr	r1, [r1, #8]
 800229e:	f7ff ffa1 	bl	80021e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	6893      	ldr	r3, [r2, #8]
 80022a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022aa:	e008      	b.n	80022be <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80022ac:	68cb      	ldr	r3, [r1, #12]
 80022ae:	684a      	ldr	r2, [r1, #4]
 80022b0:	6889      	ldr	r1, [r1, #8]
 80022b2:	f7ff ff97 	bl	80021e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022be:	6093      	str	r3, [r2, #8]
      break;
 80022c0:	e7b6      	b.n	8002230 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022c2:	684d      	ldr	r5, [r1, #4]
 80022c4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022c6:	6a01      	ldr	r1, [r0, #32]
 80022c8:	f021 0110 	bic.w	r1, r1, #16
 80022cc:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ce:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80022d0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022d2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80022da:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022de:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80022e2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80022e4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80022e6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80022e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022ec:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80022f0:	e7cb      	b.n	800228a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022f2:	684a      	ldr	r2, [r1, #4]
 80022f4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80022f6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f8:	6a05      	ldr	r5, [r0, #32]
 80022fa:	f025 0501 	bic.w	r5, r5, #1
 80022fe:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002300:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002302:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800230a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800230e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002310:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002312:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002314:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800231a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800231e:	e7b4      	b.n	800228a <HAL_TIM_ConfigClockSource+0x92>

08002320 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002320:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002322:	f001 011f 	and.w	r1, r1, #31
{
 8002326:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002328:	2401      	movs	r4, #1
 800232a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800232c:	ea23 0304 	bic.w	r3, r3, r4
 8002330:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002332:	6a03      	ldr	r3, [r0, #32]
 8002334:	408a      	lsls	r2, r1
 8002336:	431a      	orrs	r2, r3
 8002338:	6202      	str	r2, [r0, #32]
 800233a:	bd10      	pop	{r4, pc}

0800233c <HAL_TIM_PWM_Start>:
{
 800233c:	b510      	push	{r4, lr}
 800233e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002340:	2201      	movs	r2, #1
 8002342:	6800      	ldr	r0, [r0, #0]
 8002344:	f7ff ffec 	bl	8002320 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_TIM_PWM_Start+0x34>)
 800234c:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800234e:	bf02      	ittt	eq
 8002350:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002352:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002356:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235e:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002360:	bf1e      	ittt	ne
 8002362:	681a      	ldrne	r2, [r3, #0]
 8002364:	f042 0201 	orrne.w	r2, r2, #1
 8002368:	601a      	strne	r2, [r3, #0]
}
 800236a:	2000      	movs	r0, #0
 800236c:	bd10      	pop	{r4, pc}
 800236e:	bf00      	nop
 8002370:	40010000 	.word	0x40010000

08002374 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002374:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
{
 800237a:	b530      	push	{r4, r5, lr}
 800237c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002380:	d014      	beq.n	80023ac <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002382:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002388:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800238a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800238c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800238e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002390:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002398:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800239a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800239c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800239e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023a6:	2300      	movs	r3, #0
 80023a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80023ac:	4618      	mov	r0, r3

  return HAL_OK;
}
 80023ae:	bd30      	pop	{r4, r5, pc}

080023b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80023b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d01f      	beq.n	80023f8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80023b8:	68cb      	ldr	r3, [r1, #12]
 80023ba:	688a      	ldr	r2, [r1, #8]
 80023bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80023c2:	684a      	ldr	r2, [r1, #4]
 80023c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80023ca:	680a      	ldr	r2, [r1, #0]
 80023cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80023d2:	690a      	ldr	r2, [r1, #16]
 80023d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80023da:	694a      	ldr	r2, [r1, #20]
 80023dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80023e2:	69ca      	ldr	r2, [r1, #28]
 80023e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e8:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80023ea:	6802      	ldr	r2, [r0, #0]
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80023ee:	2300      	movs	r3, #0
 80023f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80023f4:	4618      	mov	r0, r3
 80023f6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80023f8:	2002      	movs	r0, #2
}
 80023fa:	4770      	bx	lr

080023fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002400:	6806      	ldr	r6, [r0, #0]
 8002402:	68c2      	ldr	r2, [r0, #12]
 8002404:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002406:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800240c:	4313      	orrs	r3, r2
 800240e:	6133      	str	r3, [r6, #16]
{
 8002410:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002412:	6883      	ldr	r3, [r0, #8]
 8002414:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002416:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002418:	4303      	orrs	r3, r0
 800241a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800241c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002420:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002422:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002426:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8002428:	4313      	orrs	r3, r2
 800242a:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800242c:	6973      	ldr	r3, [r6, #20]
 800242e:	69a2      	ldr	r2, [r4, #24]
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002436:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800243a:	6173      	str	r3, [r6, #20]
 800243c:	4b7a      	ldr	r3, [pc, #488]	; (8002628 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800243e:	d17c      	bne.n	800253a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002440:	429e      	cmp	r6, r3
 8002442:	d003      	beq.n	800244c <UART_SetConfig+0x50>
 8002444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002448:	429e      	cmp	r6, r3
 800244a:	d144      	bne.n	80024d6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800244c:	f7ff fb7e 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002450:	2519      	movs	r5, #25
 8002452:	fb05 f300 	mul.w	r3, r5, r0
 8002456:	6860      	ldr	r0, [r4, #4]
 8002458:	f04f 0964 	mov.w	r9, #100	; 0x64
 800245c:	0040      	lsls	r0, r0, #1
 800245e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002462:	fbb3 f3f9 	udiv	r3, r3, r9
 8002466:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800246a:	f7ff fb6f 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	4368      	muls	r0, r5
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fbb0 f7f3 	udiv	r7, r0, r3
 8002478:	f7ff fb68 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 800247c:	6863      	ldr	r3, [r4, #4]
 800247e:	4368      	muls	r0, r5
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	fbb3 f3f9 	udiv	r3, r3, r9
 800248a:	fb09 7313 	mls	r3, r9, r3, r7
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	3332      	adds	r3, #50	; 0x32
 8002492:	fbb3 f3f9 	udiv	r3, r3, r9
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800249c:	f7ff fb56 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 80024a0:	6862      	ldr	r2, [r4, #4]
 80024a2:	4368      	muls	r0, r5
 80024a4:	0052      	lsls	r2, r2, #1
 80024a6:	fbb0 faf2 	udiv	sl, r0, r2
 80024aa:	f7ff fb4f 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024ae:	6863      	ldr	r3, [r4, #4]
 80024b0:	4368      	muls	r0, r5
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80024bc:	fb09 a313 	mls	r3, r9, r3, sl
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	3332      	adds	r3, #50	; 0x32
 80024c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024ce:	443b      	add	r3, r7
 80024d0:	60b3      	str	r3, [r6, #8]
 80024d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024d6:	f7ff fb29 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 80024da:	2519      	movs	r5, #25
 80024dc:	fb05 f300 	mul.w	r3, r5, r0
 80024e0:	6860      	ldr	r0, [r4, #4]
 80024e2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80024e6:	0040      	lsls	r0, r0, #1
 80024e8:	fbb3 f3f0 	udiv	r3, r3, r0
 80024ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80024f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024f4:	f7ff fb1a 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 80024f8:	6863      	ldr	r3, [r4, #4]
 80024fa:	4368      	muls	r0, r5
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fbb0 f7f3 	udiv	r7, r0, r3
 8002502:	f7ff fb13 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8002506:	6863      	ldr	r3, [r4, #4]
 8002508:	4368      	muls	r0, r5
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002510:	fbb3 f3f9 	udiv	r3, r3, r9
 8002514:	fb09 7313 	mls	r3, r9, r3, r7
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	3332      	adds	r3, #50	; 0x32
 800251c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002526:	f7ff fb01 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 800252a:	6862      	ldr	r2, [r4, #4]
 800252c:	4368      	muls	r0, r5
 800252e:	0052      	lsls	r2, r2, #1
 8002530:	fbb0 faf2 	udiv	sl, r0, r2
 8002534:	f7ff fafa 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8002538:	e7b9      	b.n	80024ae <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800253a:	429e      	cmp	r6, r3
 800253c:	d002      	beq.n	8002544 <UART_SetConfig+0x148>
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <UART_SetConfig+0x230>)
 8002540:	429e      	cmp	r6, r3
 8002542:	d140      	bne.n	80025c6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002544:	f7ff fb02 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002548:	6867      	ldr	r7, [r4, #4]
 800254a:	2519      	movs	r5, #25
 800254c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002550:	fb05 f300 	mul.w	r3, r5, r0
 8002554:	00bf      	lsls	r7, r7, #2
 8002556:	fbb3 f3f7 	udiv	r3, r3, r7
 800255a:	fbb3 f3f9 	udiv	r3, r3, r9
 800255e:	011f      	lsls	r7, r3, #4
 8002560:	f7ff faf4 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002564:	6863      	ldr	r3, [r4, #4]
 8002566:	4368      	muls	r0, r5
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	fbb0 f8f3 	udiv	r8, r0, r3
 800256e:	f7ff faed 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002572:	6863      	ldr	r3, [r4, #4]
 8002574:	4368      	muls	r0, r5
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fbb0 f3f3 	udiv	r3, r0, r3
 800257c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002580:	fb09 8313 	mls	r3, r9, r3, r8
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	3332      	adds	r3, #50	; 0x32
 8002588:	fbb3 f3f9 	udiv	r3, r3, r9
 800258c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002590:	f7ff fadc 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8002594:	6862      	ldr	r2, [r4, #4]
 8002596:	4368      	muls	r0, r5
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	fbb0 faf2 	udiv	sl, r0, r2
 800259e:	f7ff fad5 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025a2:	6863      	ldr	r3, [r4, #4]
 80025a4:	4368      	muls	r0, r5
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80025b0:	fb09 a313 	mls	r3, r9, r3, sl
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	3332      	adds	r3, #50	; 0x32
 80025b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	ea43 0308 	orr.w	r3, r3, r8
 80025c4:	e783      	b.n	80024ce <UART_SetConfig+0xd2>
 80025c6:	f7ff fab1 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 80025ca:	6867      	ldr	r7, [r4, #4]
 80025cc:	2519      	movs	r5, #25
 80025ce:	f04f 0964 	mov.w	r9, #100	; 0x64
 80025d2:	fb05 f300 	mul.w	r3, r5, r0
 80025d6:	00bf      	lsls	r7, r7, #2
 80025d8:	fbb3 f3f7 	udiv	r3, r3, r7
 80025dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80025e0:	011f      	lsls	r7, r3, #4
 80025e2:	f7ff faa3 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 80025e6:	6863      	ldr	r3, [r4, #4]
 80025e8:	4368      	muls	r0, r5
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fbb0 f8f3 	udiv	r8, r0, r3
 80025f0:	f7ff fa9c 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 80025f4:	6863      	ldr	r3, [r4, #4]
 80025f6:	4368      	muls	r0, r5
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8002602:	fb09 8313 	mls	r3, r9, r3, r8
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	3332      	adds	r3, #50	; 0x32
 800260a:	fbb3 f3f9 	udiv	r3, r3, r9
 800260e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002612:	f7ff fa8b 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8002616:	6862      	ldr	r2, [r4, #4]
 8002618:	4368      	muls	r0, r5
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	fbb0 faf2 	udiv	sl, r0, r2
 8002620:	f7ff fa84 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8002624:	e7bd      	b.n	80025a2 <UART_SetConfig+0x1a6>
 8002626:	bf00      	nop
 8002628:	40011000 	.word	0x40011000
 800262c:	40011400 	.word	0x40011400

08002630 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	4604      	mov	r4, r0
 8002634:	460e      	mov	r6, r1
 8002636:	4617      	mov	r7, r2
 8002638:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263a:	6821      	ldr	r1, [r4, #0]
 800263c:	680b      	ldr	r3, [r1, #0]
 800263e:	ea36 0303 	bics.w	r3, r6, r3
 8002642:	d101      	bne.n	8002648 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002644:	2000      	movs	r0, #0
}
 8002646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002648:	1c6b      	adds	r3, r5, #1
 800264a:	d0f7      	beq.n	800263c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800264c:	b995      	cbnz	r5, 8002674 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002656:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002660:	2320      	movs	r3, #32
 8002662:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002666:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800266a:	2300      	movs	r3, #0
 800266c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002670:	2003      	movs	r0, #3
 8002672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002674:	f7fe fbc0 	bl	8000df8 <HAL_GetTick>
 8002678:	1bc0      	subs	r0, r0, r7
 800267a:	4285      	cmp	r5, r0
 800267c:	d2dd      	bcs.n	800263a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800267e:	e7e6      	b.n	800264e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002680 <HAL_UART_Init>:
{
 8002680:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002682:	4604      	mov	r4, r0
 8002684:	b340      	cbz	r0, 80026d8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800268a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800268e:	b91b      	cbnz	r3, 8002698 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002690:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002694:	f000 ffca 	bl	800362c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002698:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800269a:	2324      	movs	r3, #36	; 0x24
 800269c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80026a0:	68d3      	ldr	r3, [r2, #12]
 80026a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026a6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff fea7 	bl	80023fc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026be:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80026ca:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026cc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026d2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80026d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026d8:	2001      	movs	r0, #1
}
 80026da:	bd10      	pop	{r4, pc}

080026dc <HAL_UART_Transmit>:
{
 80026dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80026e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80026e6:	2b20      	cmp	r3, #32
{
 80026e8:	4604      	mov	r4, r0
 80026ea:	460d      	mov	r5, r1
 80026ec:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80026ee:	d14f      	bne.n	8002790 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80026f0:	2900      	cmp	r1, #0
 80026f2:	d04a      	beq.n	800278a <HAL_UART_Transmit+0xae>
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	d048      	beq.n	800278a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80026f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d047      	beq.n	8002790 <HAL_UART_Transmit+0xb4>
 8002700:	2301      	movs	r3, #1
 8002702:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002706:	2300      	movs	r3, #0
 8002708:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800270a:	2321      	movs	r3, #33	; 0x21
 800270c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002710:	f7fe fb72 	bl	8000df8 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002714:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002718:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800271a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800271e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002720:	b29b      	uxth	r3, r3
 8002722:	b96b      	cbnz	r3, 8002740 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002724:	463b      	mov	r3, r7
 8002726:	4632      	mov	r2, r6
 8002728:	2140      	movs	r1, #64	; 0x40
 800272a:	4620      	mov	r0, r4
 800272c:	f7ff ff80 	bl	8002630 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002730:	b9b0      	cbnz	r0, 8002760 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8002732:	2320      	movs	r3, #32
 8002734:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002738:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002740:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002742:	3b01      	subs	r3, #1
 8002744:	b29b      	uxth	r3, r3
 8002746:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002748:	68a3      	ldr	r3, [r4, #8]
 800274a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800274e:	4632      	mov	r2, r6
 8002750:	463b      	mov	r3, r7
 8002752:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002756:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002758:	d10e      	bne.n	8002778 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800275a:	f7ff ff69 	bl	8002630 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800275e:	b110      	cbz	r0, 8002766 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002760:	2003      	movs	r0, #3
 8002762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002766:	882b      	ldrh	r3, [r5, #0]
 8002768:	6822      	ldr	r2, [r4, #0]
 800276a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002770:	6923      	ldr	r3, [r4, #16]
 8002772:	b943      	cbnz	r3, 8002786 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8002774:	3502      	adds	r5, #2
 8002776:	e7d2      	b.n	800271e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002778:	f7ff ff5a 	bl	8002630 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800277c:	2800      	cmp	r0, #0
 800277e:	d1ef      	bne.n	8002760 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	782a      	ldrb	r2, [r5, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	3501      	adds	r5, #1
 8002788:	e7c9      	b.n	800271e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002790:	2002      	movs	r0, #2
}
 8002792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002796 <mul.constprop.0>:
}

/*
 * C = A*B
 */
static void mul(float* A, float* B, float* C, int row_a, int column_a, int column_b) {
 8002796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800279a:	9e06      	ldr	r6, [sp, #24]

	// Data matrix
	float* data_a = A;
	float* data_b = B;

	for (int i = 0; i < row_a; i++) {
 800279c:	2400      	movs	r4, #0
 800279e:	ea4f 0c86 	mov.w	ip, r6, lsl #2
		// Then we go through every column of b
		for (int j = 0; j < column_b; j++) {
			data_a = &A[i * column_a];
			data_b = &B[j];

			*C = 0; // Reset
 80027a2:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < row_a; i++) {
 80027a6:	429c      	cmp	r4, r3
 80027a8:	da16      	bge.n	80027d8 <mul.constprop.0+0x42>
			*C = 0; // Reset
 80027aa:	f8c2 8000 	str.w	r8, [r2]
 80027ae:	4686      	mov	lr, r0
			data_b = &B[j];
 80027b0:	460f      	mov	r7, r1
			// And we multiply rows from a with columns of b
			for (int k = 0; k < column_a; k++) {
 80027b2:	2500      	movs	r5, #0
 80027b4:	42ae      	cmp	r6, r5
 80027b6:	dd0b      	ble.n	80027d0 <mul.constprop.0+0x3a>
				*C += *data_a * *data_b;
 80027b8:	ecfe 6a01 	vldmia	lr!, {s13}
 80027bc:	ecb7 7a01 	vldmia	r7!, {s14}
 80027c0:	edd2 7a00 	vldr	s15, [r2]
 80027c4:	eee6 7a87 	vfma.f32	s15, s13, s14
			for (int k = 0; k < column_a; k++) {
 80027c8:	3501      	adds	r5, #1
				*C += *data_a * *data_b;
 80027ca:	edc2 7a00 	vstr	s15, [r2]
 80027ce:	e7f1      	b.n	80027b4 <mul.constprop.0+0x1e>
				data_a++;
				data_b += column_b;
			}
			C++; // ;)
 80027d0:	3204      	adds	r2, #4
	for (int i = 0; i < row_a; i++) {
 80027d2:	3401      	adds	r4, #1
 80027d4:	4460      	add	r0, ip
 80027d6:	e7e6      	b.n	80027a6 <mul.constprop.0+0x10>
 80027d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027dc <LQGI>:
void LQGI(int adim_, int ydim_, int rdim_, int xn_, const float* A, const float* B, const float* C, const float* D, const float* L, const float* Li, const float* K, float* u, float* r, float* y, float* x, float* xi, float qi, int anti_windup){
 80027dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e0:	ed2d 8b02 	vpush	{d8}
	rdim = rdim_;
 80027e4:	4d9e      	ldr	r5, [pc, #632]	; (8002a60 <LQGI+0x284>)
	xn = xn_;
 80027e6:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8002a68 <LQGI+0x28c>
	ydim = ydim_;
 80027ea:	f8df a280 	ldr.w	sl, [pc, #640]	; 8002a6c <LQGI+0x290>
	adim = adim_;
 80027ee:	4c9d      	ldr	r4, [pc, #628]	; (8002a64 <LQGI+0x288>)
void LQGI(int adim_, int ydim_, int rdim_, int xn_, const float* A, const float* B, const float* C, const float* D, const float* L, const float* Li, const float* K, float* u, float* r, float* y, float* x, float* xi, float qi, int anti_windup){
 80027f0:	b085      	sub	sp, #20
 80027f2:	4690      	mov	r8, r2
	rdim = rdim_;
 80027f4:	602a      	str	r2, [r5, #0]
	float L_vec[rdim*1];
 80027f6:	0092      	lsls	r2, r2, #2
void LQGI(int adim_, int ydim_, int rdim_, int xn_, const float* A, const float* B, const float* C, const float* D, const float* L, const float* Li, const float* K, float* u, float* r, float* y, float* x, float* xi, float qi, int anti_windup){
 80027f8:	af02      	add	r7, sp, #8
	xn = xn_;
 80027fa:	f8c9 3000 	str.w	r3, [r9]
	float L_vec[rdim*1];
 80027fe:	f102 030a 	add.w	r3, r2, #10
 8002802:	f023 0307 	bic.w	r3, r3, #7
static void control_law(float* u, float qi, float* r, const float* L, const float* Li, float* x, float* xi) {
 8002806:	f8c7 d004 	str.w	sp, [r7, #4]
	float L_vec[rdim*1];
 800280a:	ebad 0d03 	sub.w	sp, sp, r3
 800280e:	ae02      	add	r6, sp, #8
void LQGI(int adim_, int ydim_, int rdim_, int xn_, const float* A, const float* B, const float* C, const float* D, const float* L, const float* Li, const float* K, float* u, float* r, float* y, float* x, float* xi, float qi, int anti_windup){
 8002810:	4683      	mov	fp, r0
	adim = adim_;
 8002812:	6020      	str	r0, [r4, #0]
	ydim = ydim_;
 8002814:	f8ca 1000 	str.w	r1, [sl]
	memset(L_vec, 0, rdim*sizeof(float));
 8002818:	4630      	mov	r0, r6
 800281a:	2100      	movs	r1, #0
void LQGI(int adim_, int ydim_, int rdim_, int xn_, const float* A, const float* B, const float* C, const float* D, const float* L, const float* Li, const float* K, float* u, float* r, float* y, float* x, float* xi, float qi, int anti_windup){
 800281c:	eeb0 8a40 	vmov.f32	s16, s0
	memset(L_vec, 0, rdim*sizeof(float));
 8002820:	f000 ffe5 	bl	80037ee <memset>
	mul((float*) L, x, L_vec, rdim, adim, 1);
 8002824:	f8cd b000 	str.w	fp, [sp]
 8002828:	4643      	mov	r3, r8
 800282a:	4632      	mov	r2, r6
 800282c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800282e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002830:	f7ff ffb1 	bl	8002796 <mul.constprop.0>
	float Li_vec[rdim*1];
 8002834:	f8d5 b000 	ldr.w	fp, [r5]
 8002838:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800283c:	f102 030a 	add.w	r3, r2, #10
 8002840:	f023 0307 	bic.w	r3, r3, #7
 8002844:	ebad 0d03 	sub.w	sp, sp, r3
 8002848:	f10d 0808 	add.w	r8, sp, #8
	memset(Li_vec, 0, rdim*sizeof(float));
 800284c:	2100      	movs	r1, #0
 800284e:	4640      	mov	r0, r8
 8002850:	f000 ffcd 	bl	80037ee <memset>
	mul((float*) Li, xi, Li_vec, rdim, xn, 1);
 8002854:	f8d9 3000 	ldr.w	r3, [r9]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	4642      	mov	r2, r8
 800285c:	465b      	mov	r3, fp
 800285e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002860:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002862:	f7ff ff98 	bl	8002796 <mul.constprop.0>
 8002866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	for(int i = 0; i < rdim; i++){
 8002868:	f8d5 e000 	ldr.w	lr, [r5]
 800286c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800286e:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 8002872:	4642      	mov	r2, r8
 8002874:	469c      	mov	ip, r3
 8002876:	2100      	movs	r1, #0
 8002878:	46d0      	mov	r8, sl
		*(u + i) = *(Li + i)/(1-qi) * *(r + i) - (*(L_vec + i) - *(Li_vec + i));
 800287a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	for(int i = 0; i < rdim; i++){
 800287e:	4571      	cmp	r1, lr
 8002880:	f2c0 8090 	blt.w	80029a4 <LQGI+0x1c8>
	for(int i = 0; i < rdim; i++){
 8002884:	f8d5 e000 	ldr.w	lr, [r5]
 8002888:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800288a:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800288e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002890:	eb02 0c8e 	add.w	ip, r2, lr, lsl #2
 8002894:	2000      	movs	r0, #0
					*(xi + j) = 0; // Delete xi
 8002896:	f04f 0900 	mov.w	r9, #0
	for(int i = 0; i < rdim; i++){
 800289a:	4570      	cmp	r0, lr
 800289c:	f2c0 8096 	blt.w	80029cc <LQGI+0x1f0>
	float A_vec[adim*1];
 80028a0:	f8d4 9000 	ldr.w	r9, [r4]
 80028a4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80028a8:	f102 030a 	add.w	r3, r2, #10
 80028ac:	f023 0307 	bic.w	r3, r3, #7
 80028b0:	ebad 0d03 	sub.w	sp, sp, r3
 80028b4:	ae02      	add	r6, sp, #8
	memset(A_vec, 0, adim*sizeof(float));
 80028b6:	2100      	movs	r1, #0
 80028b8:	4630      	mov	r0, r6
 80028ba:	f000 ff98 	bl	80037ee <memset>
	mul((float*) A, x, A_vec, adim, adim, 1);
 80028be:	f8cd 9000 	str.w	r9, [sp]
 80028c2:	464b      	mov	r3, r9
 80028c4:	4632      	mov	r2, r6
 80028c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80028c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028ca:	f7ff ff64 	bl	8002796 <mul.constprop.0>
	float B_vec[adim*1];
 80028ce:	f8d4 a000 	ldr.w	sl, [r4]
 80028d2:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80028d6:	f102 010a 	add.w	r1, r2, #10
 80028da:	f021 0107 	bic.w	r1, r1, #7
 80028de:	ebad 0d01 	sub.w	sp, sp, r1
 80028e2:	f10d 0908 	add.w	r9, sp, #8
	memset(B_vec, 0, adim*sizeof(float));
 80028e6:	2100      	movs	r1, #0
 80028e8:	4648      	mov	r0, r9
 80028ea:	f000 ff80 	bl	80037ee <memset>
	mul((float*) B, u, B_vec, adim, rdim, 1);
 80028ee:	682b      	ldr	r3, [r5, #0]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	464a      	mov	r2, r9
 80028f4:	4653      	mov	r3, sl
 80028f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028fa:	f7ff ff4c 	bl	8002796 <mul.constprop.0>
	float C_vec[ydim*1];
 80028fe:	f8d8 a000 	ldr.w	sl, [r8]
 8002902:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8002906:	f102 010a 	add.w	r1, r2, #10
 800290a:	f021 0107 	bic.w	r1, r1, #7
 800290e:	ebad 0d01 	sub.w	sp, sp, r1
 8002912:	ad02      	add	r5, sp, #8
	memset(C_vec, 0, ydim*sizeof(float));
 8002914:	2100      	movs	r1, #0
 8002916:	4628      	mov	r0, r5
 8002918:	f000 ff69 	bl	80037ee <memset>
	mul((float*) C, x, C_vec, ydim, adim, 1);
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	462a      	mov	r2, r5
 8002922:	4653      	mov	r3, sl
 8002924:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002926:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002928:	f7ff ff35 	bl	8002796 <mul.constprop.0>
	float KC_vec[adim*1];
 800292c:	f8d4 b000 	ldr.w	fp, [r4]
 8002930:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8002934:	f102 010a 	add.w	r1, r2, #10
 8002938:	f021 0107 	bic.w	r1, r1, #7
 800293c:	ebad 0d01 	sub.w	sp, sp, r1
 8002940:	f10d 0a08 	add.w	sl, sp, #8
	memset(KC_vec, 0, adim*sizeof(float));
 8002944:	2100      	movs	r1, #0
 8002946:	4650      	mov	r0, sl
 8002948:	f000 ff51 	bl	80037ee <memset>
	mul((float*) K, C_vec, KC_vec, adim, ydim, 1);
 800294c:	f8d8 3000 	ldr.w	r3, [r8]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4629      	mov	r1, r5
 8002954:	465b      	mov	r3, fp
 8002956:	4652      	mov	r2, sl
 8002958:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800295a:	f7ff ff1c 	bl	8002796 <mul.constprop.0>
	float Ky_vec[adim*1];
 800295e:	f8d4 b000 	ldr.w	fp, [r4]
 8002962:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8002966:	f102 010a 	add.w	r1, r2, #10
 800296a:	f021 0107 	bic.w	r1, r1, #7
 800296e:	ebad 0d01 	sub.w	sp, sp, r1
 8002972:	ad02      	add	r5, sp, #8
	memset(Ky_vec, 0, adim*sizeof(float));
 8002974:	2100      	movs	r1, #0
 8002976:	4628      	mov	r0, r5
 8002978:	f000 ff39 	bl	80037ee <memset>
	mul((float*) K, y, Ky_vec, adim, ydim, 1);
 800297c:	f8d8 3000 	ldr.w	r3, [r8]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	462a      	mov	r2, r5
 8002984:	465b      	mov	r3, fp
 8002986:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002988:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800298a:	f7ff ff04 	bl	8002796 <mul.constprop.0>
	for(int i = 0; i < adim; i++){
 800298e:	6821      	ldr	r1, [r4, #0]
 8002990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002992:	2200      	movs	r2, #0
 8002994:	428a      	cmp	r2, r1
 8002996:	db51      	blt.n	8002a3c <LQGI+0x260>
}
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	ecbd 8b02 	vpop	{d8}
 80029a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(u + i) = *(Li + i)/(1-qi) * *(r + i) - (*(L_vec + i) - *(Li_vec + i));
 80029a4:	ecf0 4a01 	vldmia	r0!, {s9}
 80029a8:	ecf6 7a01 	vldmia	r6!, {s15}
 80029ac:	ecf2 5a01 	vldmia	r2!, {s11}
 80029b0:	ecfc 6a01 	vldmia	ip!, {s13}
 80029b4:	ee37 5a48 	vsub.f32	s10, s14, s16
 80029b8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80029bc:	ee84 6a85 	vdiv.f32	s12, s9, s10
	for(int i = 0; i < rdim; i++){
 80029c0:	3101      	adds	r1, #1
		*(u + i) = *(Li + i)/(1-qi) * *(r + i) - (*(L_vec + i) - *(Li_vec + i));
 80029c2:	eed6 7a26 	vfnms.f32	s15, s12, s13
 80029c6:	ece9 7a01 	vstmia	r9!, {s15}
 80029ca:	e758      	b.n	800287e <LQGI+0xa2>
		if(anti_windup == 0){
 80029cc:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 80029ce:	b946      	cbnz	r6, 80029e2 <LQGI+0x206>
			*(xi + i) = *(xi + i) + *(r + i) - *(y + i); // Always integrate if nothing else selected
 80029d0:	ed93 7a00 	vldr	s14, [r3]
 80029d4:	edd2 7a00 	vldr	s15, [r2]
 80029d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029dc:	ed91 7a00 	vldr	s14, [r1]
 80029e0:	e00f      	b.n	8002a02 <LQGI+0x226>
		}else if(anti_windup == 1){
 80029e2:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 80029e4:	2e01      	cmp	r6, #1
 80029e6:	d11c      	bne.n	8002a22 <LQGI+0x246>
			if(*(r + i) > *(y + i)){
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ed91 7a00 	vldr	s14, [r1]
 80029f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	dd11      	ble.n	8002a1e <LQGI+0x242>
				*(xi + i) = *(xi + i) + *(r + i) - *(y + i); // Only integrate r > y, else stop
 80029fa:	edd2 6a00 	vldr	s13, [r2]
 80029fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
			*(xi + i) = *(xi + i) + *(r + i) - *(y + i); // Always integrate if nothing else selected
 8002a02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a06:	edc2 7a00 	vstr	s15, [r2]
 8002a0a:	e003      	b.n	8002a14 <LQGI+0x238>
					*(xi + j) = 0; // Delete xi
 8002a0c:	f846 9b04 	str.w	r9, [r6], #4
				for(int j = 0; j < rdim; j++){
 8002a10:	4566      	cmp	r6, ip
 8002a12:	d1fb      	bne.n	8002a0c <LQGI+0x230>
	for(int i = 0; i < rdim; i++){
 8002a14:	3001      	adds	r0, #1
 8002a16:	3204      	adds	r2, #4
 8002a18:	3304      	adds	r3, #4
 8002a1a:	3104      	adds	r1, #4
 8002a1c:	e73d      	b.n	800289a <LQGI+0xbe>
			if(*(r + i) > *(y + i)){
 8002a1e:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8002a20:	e7f6      	b.n	8002a10 <LQGI+0x234>
		}else if(anti_windup == 2){
 8002a22:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8002a24:	2e02      	cmp	r6, #2
 8002a26:	d1d3      	bne.n	80029d0 <LQGI+0x1f4>
			if(*(r + i) > *(y + i)){
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	ed91 7a00 	vldr	s14, [r1]
 8002a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	ddec      	ble.n	8002a14 <LQGI+0x238>
 8002a3a:	e7de      	b.n	80029fa <LQGI+0x21e>
		*(x + i) = *(A_vec + i) - *(KC_vec + i) + *(B_vec + i) + *(Ky_vec + i);
 8002a3c:	ecf6 7a01 	vldmia	r6!, {s15}
 8002a40:	ecba 6a01 	vldmia	sl!, {s12}
 8002a44:	ecf9 6a01 	vldmia	r9!, {s13}
 8002a48:	ecb5 7a01 	vldmia	r5!, {s14}
 8002a4c:	ee77 7ac6 	vsub.f32	s15, s15, s12
	for(int i = 0; i < adim; i++){
 8002a50:	3201      	adds	r2, #1
		*(x + i) = *(A_vec + i) - *(KC_vec + i) + *(B_vec + i) + *(Ky_vec + i);
 8002a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a5a:	ece3 7a01 	vstmia	r3!, {s15}
 8002a5e:	e799      	b.n	8002994 <LQGI+0x1b8>
 8002a60:	20000170 	.word	0x20000170
 8002a64:	20000174 	.word	0x20000174
 8002a68:	2000016c 	.word	0x2000016c
 8002a6c:	20000168 	.word	0x20000168

08002a70 <LCD1602_TIM_MicorSecDelay>:

/*
 * Delay function
 */
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay) {
	TIM3->ARR = uSecDelay - 1;
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <LCD1602_TIM_MicorSecDelay+0x20>)
 8002a72:	3801      	subs	r0, #1
 8002a74:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	611a      	str	r2, [r3, #16]
	TIM3->CR1 |= 1UL;
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
	while ((TIM3->SR & 0x0001) != 1);
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	07d2      	lsls	r2, r2, #31
 8002a8a:	d5fc      	bpl.n	8002a86 <LCD1602_TIM_MicorSecDelay+0x16>
}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40000400 	.word	0x40000400

08002a94 <LCD1602_EnablePulse>:

/*
 * Enable EN pulse
 */
static void LCD1602_EnablePulse() {
 8002a94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pData_B_side[0] = 0x13; // Calling B side
 8002a98:	4c15      	ldr	r4, [pc, #84]	; (8002af0 <LCD1602_EnablePulse+0x5c>)
	pData_B_side[1] |= 0x04; // 1 0 0 = Only E will be enabled
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002a9a:	4e16      	ldr	r6, [pc, #88]	; (8002af4 <LCD1602_EnablePulse+0x60>)
	pData_B_side[1] |= 0x04; // 1 0 0 = Only E will be enabled
 8002a9c:	7863      	ldrb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002a9e:	4f16      	ldr	r7, [pc, #88]	; (8002af8 <LCD1602_EnablePulse+0x64>)
 8002aa0:	4d16      	ldr	r5, [pc, #88]	; (8002afc <LCD1602_EnablePulse+0x68>)
 8002aa2:	8839      	ldrh	r1, [r7, #0]
	pData_B_side[1] |= 0x04; // 1 0 0 = Only E will be enabled
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002aaa:	6833      	ldr	r3, [r6, #0]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4622      	mov	r2, r4
	pData_B_side[0] = 0x13; // Calling B side
 8002ab0:	f04f 0813 	mov.w	r8, #19
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	4628      	mov	r0, r5
	pData_B_side[0] = 0x13; // Calling B side
 8002ab8:	f884 8000 	strb.w	r8, [r4]
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002abc:	f7fe fc76 	bl	80013ac <HAL_I2C_Master_Transmit>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <LCD1602_EnablePulse+0x6c>)
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	f7ff ffd4 	bl	8002a70 <LCD1602_TIM_MicorSecDelay>
	pData_B_side[0] = 0x13; // Calling B side
	pData_B_side[1] &= ~0x04; // 1 0 0 -> 0 1 1 = Only E will be disabled
 8002ac8:	7863      	ldrb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002aca:	8839      	ldrh	r1, [r7, #0]
	pData_B_side[0] = 0x13; // Calling B side
 8002acc:	f884 8000 	strb.w	r8, [r4]
	pData_B_side[1] &= ~0x04; // 1 0 0 -> 0 1 1 = Only E will be disabled
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002ad6:	6833      	ldr	r3, [r6, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4622      	mov	r2, r4
 8002adc:	2302      	movs	r3, #2
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f7fe fc64 	bl	80013ac <HAL_I2C_Master_Transmit>
	LCD1602_TIM_MicorSecDelay(60);
 8002ae4:	203c      	movs	r0, #60	; 0x3c
}
 8002ae6:	b002      	add	sp, #8
 8002ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LCD1602_TIM_MicorSecDelay(60);
 8002aec:	f7ff bfc0 	b.w	8002a70 <LCD1602_TIM_MicorSecDelay>
 8002af0:	200000f6 	.word	0x200000f6
 8002af4:	2000009c 	.word	0x2000009c
 8002af8:	20000094 	.word	0x20000094
 8002afc:	200000a0 	.word	0x200000a0
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	00000000 	.word	0x00000000

08002b08 <LCD1602_TIM_Config>:
	}
}
/*
 *  Microsecond delay functions
 */
static void LCD1602_TIM_Config() {
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	b086      	sub	sp, #24
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8002b0c:	4669      	mov	r1, sp
 8002b0e:	a801      	add	r0, sp, #4
 8002b10:	f7ff f82c 	bl	8001b6c <HAL_RCC_GetClockConfig>
	if (myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1) {
 8002b14:	9b04      	ldr	r3, [sp, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d12c      	bne.n	8002b74 <LCD1602_TIM_Config+0x6c>
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8002b1a:	f7ff f807 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
	} else {
		clockSpeed = HAL_RCC_GetPCLK1Freq() * 2;
	}
	clockSpeed *= 0.000001;
 8002b1e:	f7fd fcf1 	bl	8000504 <__aeabi_ui2d>
 8002b22:	a319      	add	r3, pc, #100	; (adr r3, 8002b88 <LCD1602_TIM_Config+0x80>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fd62 	bl	80005f0 <__aeabi_dmul>

	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <LCD1602_TIM_Config+0x78>)
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8002b2e:	4c15      	ldr	r4, [pc, #84]	; (8002b84 <LCD1602_TIM_Config+0x7c>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8002b30:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 &= ~(0x0010);
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	f023 0310 	bic.w	r3, r3, #16
 8002b3e:	6023      	str	r3, [r4, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6023      	str	r3, [r4, #0]
	//Update request source
	TIM3->CR1 &= ~(1UL << 2);
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	f023 0304 	bic.w	r3, r3, #4
 8002b4e:	6023      	str	r3, [r4, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	f043 0308 	orr.w	r3, r3, #8
 8002b56:	6023      	str	r3, [r4, #0]
	clockSpeed *= 0.000001;
 8002b58:	f7fd ff5c 	bl	8000a14 <__aeabi_d2uiz>
	//Set the Prescalar
	TIM3->PSC = clockSpeed - 1;
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10 - 1; 						// The Flag sets when overflows
 8002b5c:	2309      	movs	r3, #9
	TIM3->PSC = clockSpeed - 1;
 8002b5e:	3801      	subs	r0, #1
 8002b60:	62a0      	str	r0, [r4, #40]	; 0x28
	TIM3->ARR = 10 - 1; 						// The Flag sets when overflows
 8002b62:	62e3      	str	r3, [r4, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8002b64:	2301      	movs	r3, #1
 8002b66:	6163      	str	r3, [r4, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8002b68:	6923      	ldr	r3, [r4, #16]
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	6123      	str	r3, [r4, #16]
}
 8002b70:	b006      	add	sp, #24
 8002b72:	bd10      	pop	{r4, pc}
		clockSpeed = HAL_RCC_GetPCLK1Freq() * 2;
 8002b74:	f7fe ffda 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8002b78:	0040      	lsls	r0, r0, #1
 8002b7a:	e7d0      	b.n	8002b1e <LCD1602_TIM_Config+0x16>
 8002b7c:	f3af 8000 	nop.w
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40000400 	.word	0x40000400
 8002b88:	a0b5ed8d 	.word	0xa0b5ed8d
 8002b8c:	3eb0c6f7 	.word	0x3eb0c6f7

08002b90 <LCD1602_write>:
static void LCD1602_write(uint8_t byte) {
 8002b90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pData_A_side[0] = 0x12; // Calling A side
 8002b94:	4c19      	ldr	r4, [pc, #100]	; (8002bfc <LCD1602_write+0x6c>)
 8002b96:	2312      	movs	r3, #18
 8002b98:	7023      	strb	r3, [r4, #0]
	if (mode_8_4_I2C == 1){ //8bits mode
 8002b9a:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <LCD1602_write+0x70>)
 8002b9c:	781e      	ldrb	r6, [r3, #0]
 8002b9e:	2e01      	cmp	r6, #1
static void LCD1602_write(uint8_t byte) {
 8002ba0:	4605      	mov	r5, r0
	if (mode_8_4_I2C == 1){ //8bits mode
 8002ba2:	d10f      	bne.n	8002bc4 <LCD1602_write+0x34>
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_A_side, Size, Timeout);
 8002ba4:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <LCD1602_write+0x74>)
		pData_A_side[1] = byte;
 8002ba6:	7060      	strb	r0, [r4, #1]
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_A_side, Size, Timeout);
 8002ba8:	8819      	ldrh	r1, [r3, #0]
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <LCD1602_write+0x78>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	4815      	ldr	r0, [pc, #84]	; (8002c0c <LCD1602_write+0x7c>)
 8002bb6:	f7fe fbf9 	bl	80013ac <HAL_I2C_Master_Transmit>
}
 8002bba:	b002      	add	sp, #8
 8002bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LCD1602_EnablePulse();
 8002bc0:	f7ff bf68 	b.w	8002a94 <LCD1602_EnablePulse>
	} else if (mode_8_4_I2C == 2){	//4 bits mode
 8002bc4:	2e02      	cmp	r6, #2
 8002bc6:	d116      	bne.n	8002bf6 <LCD1602_write+0x66>
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_A_side, Size, Timeout);
 8002bc8:	4f0f      	ldr	r7, [pc, #60]	; (8002c08 <LCD1602_write+0x78>)
 8002bca:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8002c04 <LCD1602_write+0x74>
		pData_A_side[1] = (byte >> 4) & 0xF; // Last 4 bytes - Look at the datasheet
 8002bce:	0903      	lsrs	r3, r0, #4
 8002bd0:	7063      	strb	r3, [r4, #1]
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_A_side, Size, Timeout);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f8b8 1000 	ldrh.w	r1, [r8]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	4622      	mov	r2, r4
 8002bdc:	4633      	mov	r3, r6
 8002bde:	480b      	ldr	r0, [pc, #44]	; (8002c0c <LCD1602_write+0x7c>)
		pData_A_side[1] = byte & 0xF; // First 4 bytes
 8002be0:	f005 050f 	and.w	r5, r5, #15
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_A_side, Size, Timeout);
 8002be4:	f7fe fbe2 	bl	80013ac <HAL_I2C_Master_Transmit>
		LCD1602_EnablePulse();
 8002be8:	f7ff ff54 	bl	8002a94 <LCD1602_EnablePulse>
		pData_A_side[1] = byte & 0xF; // First 4 bytes
 8002bec:	7065      	strb	r5, [r4, #1]
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_A_side, Size, Timeout);
 8002bee:	f8b8 1000 	ldrh.w	r1, [r8]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	e7db      	b.n	8002bae <LCD1602_write+0x1e>
}
 8002bf6:	b002      	add	sp, #8
 8002bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bfc:	200000f4 	.word	0x200000f4
 8002c00:	2000000a 	.word	0x2000000a
 8002c04:	20000094 	.word	0x20000094
 8002c08:	2000009c 	.word	0x2000009c
 8002c0c:	200000a0 	.word	0x200000a0

08002c10 <LCD1602_RS.constprop.2>:
static void LCD1602_RS(bool state) {
 8002c10:	b507      	push	{r0, r1, r2, lr}
	pData_B_side[0] = 0x13; // Calling B side
 8002c12:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <LCD1602_RS.constprop.2+0x28>)
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002c14:	4809      	ldr	r0, [pc, #36]	; (8002c3c <LCD1602_RS.constprop.2+0x2c>)
	pData_B_side[0] = 0x13; // Calling B side
 8002c16:	2313      	movs	r3, #19
 8002c18:	7013      	strb	r3, [r2, #0]
		pData_B_side[1] &= ~0x01; // 0 0 1 -> 1 1 0 = Only RS will be disabled
 8002c1a:	7853      	ldrb	r3, [r2, #1]
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	7053      	strb	r3, [r2, #1]
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <LCD1602_RS.constprop.2+0x30>)
 8002c24:	8819      	ldrh	r1, [r3, #0]
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <LCD1602_RS.constprop.2+0x34>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f7fe fbbd 	bl	80013ac <HAL_I2C_Master_Transmit>
}
 8002c32:	b003      	add	sp, #12
 8002c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c38:	200000f6 	.word	0x200000f6
 8002c3c:	200000a0 	.word	0x200000a0
 8002c40:	20000094 	.word	0x20000094
 8002c44:	2000009c 	.word	0x2000009c

08002c48 <LCD1602_writeCommand>:

/*
 * Write command
 */
static void LCD1602_writeCommand(uint8_t command) {
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	4604      	mov	r4, r0
	//Set RS to 0
	LCD1602_RS(false);
 8002c4c:	f7ff ffe0 	bl	8002c10 <LCD1602_RS.constprop.2>
	//Call low level write parallel function
	LCD1602_write(command);
 8002c50:	4620      	mov	r0, r4
}
 8002c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD1602_write(command);
 8002c56:	f7ff bf9b 	b.w	8002b90 <LCD1602_write>
	...

08002c5c <LCD1602_mcp23017>:
}

/*
 * Initial for MCP23017 i2c connection to the LCD
 */
void LCD1602_mcp23017(I2C_HandleTypeDef hi2c1_, uint16_t DevAddress_,uint32_t Trials_, uint32_t Timeout_, GPIO_TypeDef* GPIOx_,uint16_t GPIO_Pin_LED_) {
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 */
	hi2c1 = hi2c1_;
	DevAddress = DevAddress_;
	Trials = Trials_;
	Timeout = Timeout_;
	GPIOx = GPIOx_;
 8002c62:	4f24      	ldr	r7, [pc, #144]	; (8002cf4 <LCD1602_mcp23017+0x98>)
void LCD1602_mcp23017(I2C_HandleTypeDef hi2c1_, uint16_t DevAddress_,uint32_t Trials_, uint32_t Timeout_, GPIO_TypeDef* GPIOx_,uint16_t GPIO_Pin_LED_) {
 8002c64:	f8bd 6084 	ldrh.w	r6, [sp, #132]	; 0x84
 8002c68:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002c6c:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8002c70:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8002c74:	f8bd b094 	ldrh.w	fp, [sp, #148]	; 0x94
	DevAddress = DevAddress_;
 8002c78:	4d1f      	ldr	r5, [pc, #124]	; (8002cf8 <LCD1602_mcp23017+0x9c>)
void LCD1602_mcp23017(I2C_HandleTypeDef hi2c1_, uint16_t DevAddress_,uint32_t Trials_, uint32_t Timeout_, GPIO_TypeDef* GPIOx_,uint16_t GPIO_Pin_LED_) {
 8002c7a:	ac0c      	add	r4, sp, #48	; 0x30
 8002c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hi2c1 = hi2c1_;
 8002c80:	4621      	mov	r1, r4
 8002c82:	2254      	movs	r2, #84	; 0x54
 8002c84:	481d      	ldr	r0, [pc, #116]	; (8002cfc <LCD1602_mcp23017+0xa0>)
	Timeout = Timeout_;
 8002c86:	4c1e      	ldr	r4, [pc, #120]	; (8002d00 <LCD1602_mcp23017+0xa4>)
	hi2c1 = hi2c1_;
 8002c88:	f000 fda6 	bl	80037d8 <memcpy>
	GPIOx = GPIOx_;
 8002c8c:	f8c7 8000 	str.w	r8, [r7]
	GPIO_Pin_LED = GPIO_Pin_LED_;
 8002c90:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8002d0c <LCD1602_mcp23017+0xb0>

	/*
	 * Check connection
	 */
	if (HAL_I2C_IsDeviceReady(&hi2c1, DevAddress, Trials, Timeout) == HAL_OK) {
 8002c94:	4819      	ldr	r0, [pc, #100]	; (8002cfc <LCD1602_mcp23017+0xa0>)
	DevAddress = DevAddress_;
 8002c96:	802e      	strh	r6, [r5, #0]
	if (HAL_I2C_IsDeviceReady(&hi2c1, DevAddress, Trials, Timeout) == HAL_OK) {
 8002c98:	4631      	mov	r1, r6
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	4652      	mov	r2, sl
	Timeout = Timeout_;
 8002c9e:	f8c4 9000 	str.w	r9, [r4]
	GPIO_Pin_LED = GPIO_Pin_LED_;
 8002ca2:	f8a8 b000 	strh.w	fp, [r8]
	if (HAL_I2C_IsDeviceReady(&hi2c1, DevAddress, Trials, Timeout) == HAL_OK) {
 8002ca6:	f7fe fc4f 	bl	8001548 <HAL_I2C_IsDeviceReady>
 8002caa:	4606      	mov	r6, r0
 8002cac:	b9e0      	cbnz	r0, 8002ce8 <LCD1602_mcp23017+0x8c>
		HAL_GPIO_TogglePin(GPIOx, GPIO_Pin_LED); // Connection. Light up GPIOx at pin GPIO_Pin_LED
 8002cae:	f8b8 1000 	ldrh.w	r1, [r8]
 8002cb2:	6838      	ldr	r0, [r7, #0]
 8002cb4:	f7fe f9f1 	bl	800109a <HAL_GPIO_TogglePin>
		/*
		 * Set output for A-side and B-side
		 */
		pData_A_side[0] = 0x00;
 8002cb8:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <LCD1602_mcp23017+0xa8>)
		pData_A_side[1] = 0x00;
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_A_side, Size, Timeout);
 8002cba:	6823      	ldr	r3, [r4, #0]
		pData_A_side[0] = 0x00;
 8002cbc:	7016      	strb	r6, [r2, #0]
		pData_A_side[1] = 0x00;
 8002cbe:	7056      	strb	r6, [r2, #1]
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_A_side, Size, Timeout);
 8002cc0:	8829      	ldrh	r1, [r5, #0]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	480d      	ldr	r0, [pc, #52]	; (8002cfc <LCD1602_mcp23017+0xa0>)
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f7fe fb70 	bl	80013ac <HAL_I2C_Master_Transmit>

		/*
		 * B-side
		 */
		pData_B_side[0] = 0x01;
 8002ccc:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <LCD1602_mcp23017+0xac>)
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002cce:	8829      	ldrh	r1, [r5, #0]
 8002cd0:	480a      	ldr	r0, [pc, #40]	; (8002cfc <LCD1602_mcp23017+0xa0>)
		pData_B_side[0] = 0x01;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	9310      	str	r3, [sp, #64]	; 0x40
 8002cda:	2302      	movs	r3, #2

	}
}
 8002cdc:	b003      	add	sp, #12
 8002cde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce2:	b004      	add	sp, #16
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002ce4:	f7fe bb62 	b.w	80013ac <HAL_I2C_Master_Transmit>
}
 8002ce8:	b003      	add	sp, #12
 8002cea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cee:	b004      	add	sp, #16
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000098 	.word	0x20000098
 8002cf8:	20000094 	.word	0x20000094
 8002cfc:	200000a0 	.word	0x200000a0
 8002d00:	2000009c 	.word	0x2000009c
 8002d04:	200000f4 	.word	0x200000f4
 8002d08:	200000f6 	.word	0x200000f6
 8002d0c:	20000096 	.word	0x20000096

08002d10 <LCD1602_Begin8BIT>:

/*
 * LCD begin 8 bits function
 */
void LCD1602_Begin8BIT() {
 8002d10:	b538      	push	{r3, r4, r5, lr}
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8002d12:	f7ff fef9 	bl	8002b08 <LCD1602_TIM_Config>
	//Set the mode to 8 bits
	mode_8_4_I2C = 1;
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <LCD1602_Begin8BIT+0x58>)
 8002d18:	2401      	movs	r4, #1
 8002d1a:	701c      	strb	r4, [r3, #0]
	//Function set variable to 8 bits mode
	FunctionSet = 0x38;
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <LCD1602_Begin8BIT+0x5c>)
 8002d1e:	2538      	movs	r5, #56	; 0x38
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8002d20:	2014      	movs	r0, #20
	FunctionSet = 0x38;
 8002d22:	701d      	strb	r5, [r3, #0]
	HAL_Delay(20);
 8002d24:	f7fe f86e 	bl	8000e04 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_writeCommand(0x30);
 8002d28:	2030      	movs	r0, #48	; 0x30
 8002d2a:	f7ff ff8d 	bl	8002c48 <LCD1602_writeCommand>
	HAL_Delay(5);
 8002d2e:	2005      	movs	r0, #5
 8002d30:	f7fe f868 	bl	8000e04 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 8002d34:	2030      	movs	r0, #48	; 0x30
 8002d36:	f7ff ff87 	bl	8002c48 <LCD1602_writeCommand>
	HAL_Delay(1);
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7fe f862 	bl	8000e04 <HAL_Delay>
	LCD1602_writeCommand(0x30);
 8002d40:	2030      	movs	r0, #48	; 0x30
 8002d42:	f7ff ff81 	bl	8002c48 <LCD1602_writeCommand>
	HAL_Delay(1);
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7fe f85c 	bl	8000e04 <HAL_Delay>
	//3. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	f7ff ff7b 	bl	8002c48 <LCD1602_writeCommand>
	//4. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8002d52:	200f      	movs	r0, #15
 8002d54:	f7ff ff78 	bl	8002c48 <LCD1602_writeCommand>
	//5. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ff75 	bl	8002c48 <LCD1602_writeCommand>
	HAL_Delay(2);
 8002d5e:	2002      	movs	r0, #2
}
 8002d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(2);
 8002d64:	f7fe b84e 	b.w	8000e04 <HAL_Delay>
 8002d68:	2000000a 	.word	0x2000000a
 8002d6c:	20000009 	.word	0x20000009

08002d70 <LCD1602_print>:
}

/*
 * LCD print string
 */
void LCD1602_print(char* string) {
 8002d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	pData_B_side[0] = 0x13; // Calling B side
 8002d74:	4f11      	ldr	r7, [pc, #68]	; (8002dbc <LCD1602_print+0x4c>)
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002d76:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8002dc4 <LCD1602_print+0x54>
 8002d7a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8002dc8 <LCD1602_print+0x58>
 8002d7e:	1e46      	subs	r6, r0, #1
 8002d80:	f100 050f 	add.w	r5, r0, #15
	for (uint8_t i = 0; i < 16 && string[i] != 0; i++) {
 8002d84:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8002d88:	b1a4      	cbz	r4, 8002db4 <LCD1602_print+0x44>
	pData_B_side[0] = 0x13; // Calling B side
 8002d8a:	2313      	movs	r3, #19
 8002d8c:	703b      	strb	r3, [r7, #0]
		pData_B_side[1] |= 0x01; // 0 0 1 = Only RS will be enabled
 8002d8e:	787b      	ldrb	r3, [r7, #1]
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002d90:	f8b8 1000 	ldrh.w	r1, [r8]
 8002d94:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <LCD1602_print+0x4c>)
 8002d96:	480a      	ldr	r0, [pc, #40]	; (8002dc0 <LCD1602_print+0x50>)
		pData_B_side[1] |= 0x01; // 0 0 1 = Only RS will be enabled
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	707b      	strb	r3, [r7, #1]
		HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData_B_side, Size, Timeout);
 8002d9e:	f8d9 3000 	ldr.w	r3, [r9]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2302      	movs	r3, #2
 8002da6:	f7fe fb01 	bl	80013ac <HAL_I2C_Master_Transmit>
	LCD1602_write(data);
 8002daa:	4620      	mov	r0, r4
 8002dac:	f7ff fef0 	bl	8002b90 <LCD1602_write>
	for (uint8_t i = 0; i < 16 && string[i] != 0; i++) {
 8002db0:	42ae      	cmp	r6, r5
 8002db2:	d1e7      	bne.n	8002d84 <LCD1602_print+0x14>
		LCD1602_writeData((uint8_t) string[i]);
	}
}
 8002db4:	b003      	add	sp, #12
 8002db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dba:	bf00      	nop
 8002dbc:	200000f6 	.word	0x200000f6
 8002dc0:	200000a0 	.word	0x200000a0
 8002dc4:	20000094 	.word	0x20000094
 8002dc8:	2000009c 	.word	0x2000009c

08002dcc <LCD1602_setCursor>:
/*
 * set cursor position
 */
void LCD1602_setCursor(uint8_t row, uint8_t col) {
	uint8_t maskData;
	maskData = (col - 1) & 0x0F;
 8002dcc:	3901      	subs	r1, #1
 8002dce:	f001 010f 	and.w	r1, r1, #15
	if (row == 1) {
 8002dd2:	2801      	cmp	r0, #1
		maskData |= (0x80);
		LCD1602_writeCommand(maskData);
 8002dd4:	bf0c      	ite	eq
 8002dd6:	f041 0080 	orreq.w	r0, r1, #128	; 0x80
	} else {
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
 8002dda:	f041 00c0 	orrne.w	r0, r1, #192	; 0xc0
 8002dde:	f7ff bf33 	b.w	8002c48 <LCD1602_writeCommand>

08002de2 <LCD1602_2ndLine>:
 8002de2:	20c0      	movs	r0, #192	; 0xc0
 8002de4:	f7ff bf30 	b.w	8002c48 <LCD1602_writeCommand>

08002de8 <LCD1602_noCursor>:

/*
 * Cursor OFF
 */
void LCD1602_noCursor(void) {
	DisplayControl &= ~(0x02);
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <LCD1602_noCursor+0x10>)
 8002dea:	7818      	ldrb	r0, [r3, #0]
 8002dec:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8002df0:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8002df2:	f7ff bf29 	b.w	8002c48 <LCD1602_writeCommand>
 8002df6:	bf00      	nop
 8002df8:	20000008 	.word	0x20000008

08002dfc <LCD1602_noBlink>:

/*
 * No Blinking cursor
 */
void LCD1602_noBlink(void) {
	DisplayControl &= ~(0x01);
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <LCD1602_noBlink+0x10>)
 8002dfe:	7818      	ldrb	r0, [r3, #0]
 8002e00:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8002e04:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8002e06:	f7ff bf1f 	b.w	8002c48 <LCD1602_writeCommand>
 8002e0a:	bf00      	nop
 8002e0c:	20000008 	.word	0x20000008

08002e10 <MCP3008_Init>:
static SPI_HandleTypeDef hspi;

/*
 * Set the MISO, MOSI, SCK and CS
 */
void MCP3008_Init(SPI_HandleTypeDef hspi_, GPIO_TypeDef* GPIOx_, uint16_t GPIO_Pin_){
 8002e10:	b084      	sub	sp, #16
 8002e12:	b508      	push	{r3, lr}
 8002e14:	f10d 0e08 	add.w	lr, sp, #8
 8002e18:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	hspi = hspi_;
 8002e1c:	2258      	movs	r2, #88	; 0x58
 8002e1e:	4671      	mov	r1, lr
 8002e20:	4806      	ldr	r0, [pc, #24]	; (8002e3c <MCP3008_Init+0x2c>)
 8002e22:	f000 fcd9 	bl	80037d8 <memcpy>
	GPIOx = GPIOx_; // Chip select
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MCP3008_Init+0x30>)
 8002e28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002e2a:	601a      	str	r2, [r3, #0]
	GPIO_Pin = GPIO_Pin_;
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <MCP3008_Init+0x34>)
 8002e2e:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8002e32:	801a      	strh	r2, [r3, #0]
}
 8002e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e38:	b004      	add	sp, #16
 8002e3a:	4770      	bx	lr
 8002e3c:	20000100 	.word	0x20000100
 8002e40:	200000fc 	.word	0x200000fc
 8002e44:	200000f8 	.word	0x200000f8

08002e48 <MCP3008_Read_Channel>:

/*
 * Read the channels from 0 to 7
 */
uint16_t MCP3008_Read_Channel(uint8_t channel){
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * Declare data that we will send
	 */
	uint8_t pTxData[3] = {0};
	pTxData[0] = ((0x01 << 7)|				// start bit
				 (1 << 6)|					// SGL
				 ((channel & 0x07) << 3)); 	// channel number
 8002e4a:	00c0      	lsls	r0, r0, #3
uint16_t MCP3008_Read_Channel(uint8_t channel){
 8002e4c:	b085      	sub	sp, #20
	uint8_t pRxData[3] = {0};

	/*
	 * CS low, Send and receive, CS high
	 */
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002e4e:	4f22      	ldr	r7, [pc, #136]	; (8002ed8 <MCP3008_Read_Channel+0x90>)
 8002e50:	4e22      	ldr	r6, [pc, #136]	; (8002edc <MCP3008_Read_Channel+0x94>)
	HAL_SPI_TransmitReceive(&hspi, &pTxData[0], &pRxData[0], Size, Timeout);
 8002e52:	4c23      	ldr	r4, [pc, #140]	; (8002ee0 <MCP3008_Read_Channel+0x98>)
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002e54:	8839      	ldrh	r1, [r7, #0]
				 ((channel & 0x07) << 3)); 	// channel number
 8002e56:	f000 0038 	and.w	r0, r0, #56	; 0x38
	uint8_t pTxData[3] = {0};
 8002e5a:	2200      	movs	r2, #0
				 (1 << 6)|					// SGL
 8002e5c:	f060 003f 	orn	r0, r0, #63	; 0x3f
	HAL_SPI_TransmitReceive(&hspi, &pTxData[0], &pRxData[0], Size, Timeout);
 8002e60:	250a      	movs	r5, #10
	uint8_t pTxData[3] = {0};
 8002e62:	f8ad 2008 	strh.w	r2, [sp, #8]
	pTxData[0] = ((0x01 << 7)|				// start bit
 8002e66:	f88d 0008 	strb.w	r0, [sp, #8]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002e6a:	6830      	ldr	r0, [r6, #0]
	uint8_t pTxData[3] = {0};
 8002e6c:	f88d 200a 	strb.w	r2, [sp, #10]
	uint8_t pRxData[3] = {0};
 8002e70:	f8ad 200c 	strh.w	r2, [sp, #12]
 8002e74:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002e78:	f7fe f90a 	bl	8001090 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi, &pTxData[0], &pRxData[0], Size, Timeout);
 8002e7c:	aa03      	add	r2, sp, #12
 8002e7e:	a902      	add	r1, sp, #8
 8002e80:	9500      	str	r5, [sp, #0]
 8002e82:	2301      	movs	r3, #1
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7fe ff36 	bl	8001cf6 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi, &pTxData[1], &pRxData[1], Size, Timeout);
 8002e8a:	f10d 020d 	add.w	r2, sp, #13
 8002e8e:	f10d 0109 	add.w	r1, sp, #9
 8002e92:	9500      	str	r5, [sp, #0]
 8002e94:	2301      	movs	r3, #1
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7fe ff2d 	bl	8001cf6 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi, &pTxData[2], &pRxData[2], Size, Timeout);
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f10d 020e 	add.w	r2, sp, #14
 8002ea2:	eb0d 0105 	add.w	r1, sp, r5
 8002ea6:	9500      	str	r5, [sp, #0]
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7fe ff24 	bl	8001cf6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002eae:	6830      	ldr	r0, [r6, #0]
 8002eb0:	8839      	ldrh	r1, [r7, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f7fe f8ec 	bl	8001090 <HAL_GPIO_WritePin>

	/*
	 * Compute the ADC
	 */
	return 0x3FF & ((pRxData[0] & 0x01) << 9 | (pRxData[1] & 0xFF) << 1 | (pRxData[2] & 0x80) >> 7);
 8002eb8:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8002ebc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002ec0:	09c0      	lsrs	r0, r0, #7
 8002ec2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8002ec6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002eca:	025b      	lsls	r3, r3, #9
 8002ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
}
 8002ed0:	4318      	orrs	r0, r3
 8002ed2:	b005      	add	sp, #20
 8002ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200000f8 	.word	0x200000f8
 8002edc:	200000fc 	.word	0x200000fc
 8002ee0:	20000100 	.word	0x20000100

08002ee4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002ee4:	b530      	push	{r4, r5, lr}
 8002ee6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002ee8:	2230      	movs	r2, #48	; 0x30
 8002eea:	2100      	movs	r1, #0
 8002eec:	a808      	add	r0, sp, #32
 8002eee:	f000 fc7e 	bl	80037ee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2214      	movs	r2, #20
 8002ef6:	a803      	add	r0, sp, #12
 8002ef8:	f000 fc79 	bl	80037ee <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8002efc:	2400      	movs	r4, #0
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <SystemClock_Config+0x8c>)
 8002f00:	9401      	str	r4, [sp, #4]
 8002f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <SystemClock_Config+0x90>)
	__HAL_RCC_PWR_CLK_ENABLE()
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f16:	9402      	str	r4, [sp, #8]
 8002f18:	6813      	ldr	r3, [r2, #0]
 8002f1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	6813      	ldr	r3, [r2, #0]
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f26:	940f      	str	r4, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f2c:	9302      	str	r3, [sp, #8]
 8002f2e:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f30:	2301      	movs	r3, #1
 8002f32:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f34:	2310      	movs	r3, #16
 8002f36:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002f38:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002f3a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002f3e:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002f40:	2304      	movs	r3, #4
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f42:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002f44:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002f46:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f48:	2307      	movs	r3, #7
 8002f4a:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f4c:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f4e:	950e      	str	r5, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002f50:	f7fe fba2 	bl	8001698 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002f54:	230f      	movs	r3, #15
 8002f56:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f58:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f5e:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f60:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f62:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f64:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f66:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f68:	f7fe fd46 	bl	80019f8 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 8002f6c:	b015      	add	sp, #84	; 0x54
 8002f6e:	bd30      	pop	{r4, r5, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40007000 	.word	0x40007000

08002f78 <main>:
int main(void) {
 8002f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f7c:	ed2d 8b02 	vpush	{d8}
 8002f80:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002f84:	af5a      	add	r7, sp, #360	; 0x168
	HAL_Init();
 8002f86:	f7fd ff11 	bl	8000dac <HAL_Init>
	SystemClock_Config();
 8002f8a:	f7ff ffab 	bl	8002ee4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002f8e:	2214      	movs	r2, #20
 8002f90:	2100      	movs	r1, #0
 8002f92:	4638      	mov	r0, r7

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002f94:	2400      	movs	r4, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002f96:	f000 fc2a 	bl	80037ee <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002f9a:	4bd5      	ldr	r3, [pc, #852]	; (80032f0 <main+0x378>)
 8002f9c:	941e      	str	r4, [sp, #120]	; 0x78
 8002f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, Green_LED_Board_Pin | Chip_Select_SPI1_Pin,
 8002fa0:	f8df b398 	ldr.w	fp, [pc, #920]	; 800333c <main+0x3c4>
	hi2c1.Instance = I2C1;
 8002fa4:	f8df 8398 	ldr.w	r8, [pc, #920]	; 8003340 <main+0x3c8>
	hspi1.Instance = SPI1;
 8002fa8:	4ed2      	ldr	r6, [pc, #840]	; (80032f4 <main+0x37c>)
	htim1.Instance = TIM1;
 8002faa:	4dd3      	ldr	r5, [pc, #844]	; (80032f8 <main+0x380>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb4:	f002 0201 	and.w	r2, r2, #1
 8002fb8:	921e      	str	r2, [sp, #120]	; 0x78
 8002fba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002fbc:	941f      	str	r4, [sp, #124]	; 0x7c
 8002fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc0:	f042 0202 	orr.w	r2, r2, #2
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	f003 0302 	and.w	r3, r3, #2
	HAL_GPIO_WritePin(GPIOA, Green_LED_Board_Pin | Chip_Select_SPI1_Pin,
 8002fcc:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002fce:	931f      	str	r3, [sp, #124]	; 0x7c
	HAL_GPIO_WritePin(GPIOA, Green_LED_Board_Pin | Chip_Select_SPI1_Pin,
 8002fd0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002fd4:	4658      	mov	r0, fp
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002fd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
	HAL_GPIO_WritePin(GPIOA, Green_LED_Board_Pin | Chip_Select_SPI1_Pin,
 8002fd8:	f7fe f85a 	bl	8001090 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : Green_LED_Board_Pin Chip_Select_SPI1_Pin */
	GPIO_InitStruct.Pin = Green_LED_Board_Pin | Chip_Select_SPI1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fdc:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8002fe0:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	4639      	mov	r1, r7
 8002fe4:	4658      	mov	r0, fp
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe6:	e887 000c 	stmia.w	r7, {r2, r3}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	60bc      	str	r4, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	60fc      	str	r4, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fee:	f7fd ff79 	bl	8000ee4 <HAL_GPIO_Init>
	hi2c1.Init.ClockSpeed = 100000;
 8002ff2:	49c2      	ldr	r1, [pc, #776]	; (80032fc <main+0x384>)
 8002ff4:	4bc2      	ldr	r3, [pc, #776]	; (8003300 <main+0x388>)
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ff6:	f8c8 4008 	str.w	r4, [r8, #8]
	hi2c1.Init.ClockSpeed = 100000;
 8002ffa:	e888 000a 	stmia.w	r8, {r1, r3}
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002ffe:	4640      	mov	r0, r8
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003000:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 8003004:	f8c8 400c 	str.w	r4, [r8, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003008:	f8c8 3010 	str.w	r3, [r8, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800300c:	f8c8 4014 	str.w	r4, [r8, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003010:	f8c8 4018 	str.w	r4, [r8, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003014:	f8c8 401c 	str.w	r4, [r8, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003018:	f8c8 4020 	str.w	r4, [r8, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800301c:	f7fe f922 	bl	8001264 <HAL_I2C_Init>
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003020:	48b8      	ldr	r0, [pc, #736]	; (8003304 <main+0x38c>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003022:	60b4      	str	r4, [r6, #8]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003024:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003028:	e886 0009 	stmia.w	r6, {r0, r3}
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800302c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003030:	61b3      	str	r3, [r6, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003032:	2320      	movs	r3, #32
 8003034:	61f3      	str	r3, [r6, #28]
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003036:	4630      	mov	r0, r6
	hspi1.Init.CRCPolynomial = 10;
 8003038:	230a      	movs	r3, #10
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800303a:	f50d 79a0 	add.w	r9, sp, #320	; 0x140
	hspi1.Init.CRCPolynomial = 10;
 800303e:	62f3      	str	r3, [r6, #44]	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003040:	f10d 0af0 	add.w	sl, sp, #240	; 0xf0
	hspi1.Init.CRCPolynomial = 10;
 8003044:	9317      	str	r3, [sp, #92]	; 0x5c
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003046:	60f4      	str	r4, [r6, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003048:	6134      	str	r4, [r6, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800304a:	6174      	str	r4, [r6, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800304c:	6234      	str	r4, [r6, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800304e:	6274      	str	r4, [r6, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003050:	62b4      	str	r4, [r6, #40]	; 0x28
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003052:	f7fe fe13 	bl	8001c7c <HAL_SPI_Init>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003056:	4621      	mov	r1, r4
 8003058:	2210      	movs	r2, #16
 800305a:	a846      	add	r0, sp, #280	; 0x118
 800305c:	f000 fbc7 	bl	80037ee <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003060:	4621      	mov	r1, r4
 8003062:	221c      	movs	r2, #28
 8003064:	4648      	mov	r0, r9
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003066:	f8ca 4000 	str.w	r4, [sl]
 800306a:	f8ca 4004 	str.w	r4, [sl, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800306e:	f000 fbbe 	bl	80037ee <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003072:	4621      	mov	r1, r4
 8003074:	2220      	movs	r2, #32
 8003076:	4638      	mov	r0, r7
 8003078:	f000 fbb9 	bl	80037ee <memset>
	htim1.Init.Prescaler = 84;
 800307c:	4aa2      	ldr	r2, [pc, #648]	; (8003308 <main+0x390>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307e:	60ac      	str	r4, [r5, #8]
	htim1.Init.Prescaler = 84;
 8003080:	f04f 0e54 	mov.w	lr, #84	; 0x54
	htim1.Init.Period = 40;
 8003084:	2328      	movs	r3, #40	; 0x28
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8003086:	4628      	mov	r0, r5
	htim1.Init.Prescaler = 84;
 8003088:	e885 4004 	stmia.w	r5, {r2, lr}
	htim1.Init.Period = 40;
 800308c:	60eb      	str	r3, [r5, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308e:	612c      	str	r4, [r5, #16]
	htim1.Init.RepetitionCounter = 0;
 8003090:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003092:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8003094:	f7fe ffe4 	bl	8002060 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800309c:	a946      	add	r1, sp, #280	; 0x118
 800309e:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a0:	9246      	str	r2, [sp, #280]	; 0x118
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80030a2:	f7ff f8a9 	bl	80021f8 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80030a6:	4628      	mov	r0, r5
 80030a8:	f7fe fff4 	bl	8002094 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80030ac:	4651      	mov	r1, sl
 80030ae:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b0:	f8ca 4000 	str.w	r4, [sl]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b4:	f8ca 4004 	str.w	r4, [sl, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80030b8:	f7ff f95c 	bl	8002374 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030bc:	2260      	movs	r2, #96	; 0x60
	sConfigOC.Pulse = 0;
 80030be:	e889 0014 	stmia.w	r9, {r2, r4}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80030c2:	4649      	mov	r1, r9
 80030c4:	4622      	mov	r2, r4
 80030c6:	4628      	mov	r0, r5
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030c8:	f8c9 4008 	str.w	r4, [r9, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030cc:	f8c9 400c 	str.w	r4, [r9, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030d0:	f8c9 4010 	str.w	r4, [r9, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030d4:	f8c9 4014 	str.w	r4, [r9, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030d8:	f8c9 4018 	str.w	r4, [r9, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80030dc:	f7ff f820 	bl	8002120 <HAL_TIM_PWM_ConfigChannel>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80030e4:	4639      	mov	r1, r7
 80030e6:	4628      	mov	r0, r5
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030e8:	617a      	str	r2, [r7, #20]
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030ea:	603c      	str	r4, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030ec:	607c      	str	r4, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030ee:	60bc      	str	r4, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80030f0:	60fc      	str	r4, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030f2:	613c      	str	r4, [r7, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030f4:	61fc      	str	r4, [r7, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80030f6:	f7ff f95b 	bl	80023b0 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_MspPostInit(&htim1);
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 fa6a 	bl	80035d4 <HAL_TIM_MspPostInit>
	huart2.Instance = USART2;
 8003100:	4882      	ldr	r0, [pc, #520]	; (800330c <main+0x394>)
	huart2.Init.BaudRate = 115200;
 8003102:	4a83      	ldr	r2, [pc, #524]	; (8003310 <main+0x398>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003104:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 8003106:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
 800310a:	e880 1004 	stmia.w	r0, {r2, ip}
	huart2.Init.Mode = UART_MODE_TX_RX;
 800310e:	220c      	movs	r2, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003110:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003112:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003114:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003116:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003118:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800311a:	f7ff fab1 	bl	8002680 <HAL_UART_Init>
	LCD1602_mcp23017(hi2c1, MCP2307_ADDRESS, MCP2307_TRAILS, MCP2307_TIMEOUT,
 800311e:	2320      	movs	r3, #32
 8003120:	9315      	str	r3, [sp, #84]	; 0x54
 8003122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003124:	9313      	str	r3, [sp, #76]	; 0x4c
 8003126:	2305      	movs	r3, #5
 8003128:	f108 0110 	add.w	r1, r8, #16
 800312c:	9312      	str	r3, [sp, #72]	; 0x48
 800312e:	2244      	movs	r2, #68	; 0x44
 8003130:	2340      	movs	r3, #64	; 0x40
 8003132:	4668      	mov	r0, sp
 8003134:	9311      	str	r3, [sp, #68]	; 0x44
 8003136:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 800313a:	f000 fb4d 	bl	80037d8 <memcpy>
 800313e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8003142:	f7ff fd8b 	bl	8002c5c <LCD1602_mcp23017>
	LCD1602_Begin8BIT();
 8003146:	f7ff fde3 	bl	8002d10 <LCD1602_Begin8BIT>
	LCD1602_noCursor();
 800314a:	f7ff fe4d 	bl	8002de8 <LCD1602_noCursor>
	LCD1602_noBlink();
 800314e:	f7ff fe55 	bl	8002dfc <LCD1602_noBlink>
	LCD1602_print("LQGI-Controller");
 8003152:	4870      	ldr	r0, [pc, #448]	; (8003314 <main+0x39c>)
 8003154:	f7ff fe0c 	bl	8002d70 <LCD1602_print>
	LCD1602_2ndLine();
 8003158:	f7ff fe43 	bl	8002de2 <LCD1602_2ndLine>
	MCP3008_Init(hspi1, GPIOA, GPIO_PIN_10);
 800315c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003160:	f106 0110 	add.w	r1, r6, #16
 8003164:	2248      	movs	r2, #72	; 0x48
 8003166:	4668      	mov	r0, sp
 8003168:	9313      	str	r3, [sp, #76]	; 0x4c
 800316a:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800316e:	f000 fb33 	bl	80037d8 <memcpy>
 8003172:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003176:	f7ff fe4b 	bl	8002e10 <MCP3008_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800317a:	4621      	mov	r1, r4
 800317c:	4628      	mov	r0, r5
 800317e:	f7ff f8dd 	bl	800233c <HAL_TIM_PWM_Start>
	char lcd_Text[16] = { 0 }; // Message
 8003182:	4621      	mov	r1, r4
 8003184:	2210      	movs	r2, #16
 8003186:	a824      	add	r0, sp, #144	; 0x90
 8003188:	f000 fb31 	bl	80037ee <memset>
	const float B[adim * rdim] ={ -0.473079,
 800318c:	4e62      	ldr	r6, [pc, #392]	; (8003318 <main+0x3a0>)
	uint8_t sendUSB[14] = {0};
 800318e:	4621      	mov	r1, r4
 8003190:	220e      	movs	r2, #14
 8003192:	a820      	add	r0, sp, #128	; 0x80
 8003194:	f000 fb2b 	bl	80037ee <memset>
	const float A[adim * adim] = { 0.99500201,  -0.00656006,  -0.00324621,   0.00284745,   0.00474606,   0.00299756,   0.00053557,   0.00510325,   0.00195878,   0.00103930,
 8003198:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800319c:	495f      	ldr	r1, [pc, #380]	; (800331c <main+0x3a4>)
 800319e:	4638      	mov	r0, r7
 80031a0:	f000 fb1a 	bl	80037d8 <memcpy>
	const float B[adim * rdim] ={ -0.473079,
 80031a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80031a6:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
 80031aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80031ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80031b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80031b4:	e896 0003 	ldmia.w	r6, {r0, r1}
	const float C[ydim * adim] = {-0.0126102,  -0.0065661,  -0.0046448,   0.0032324,   0.0058147,   0.0034044,   0.0013687,   0.0057305,   0.0028195,   0.0014901};
 80031b8:	f106 0c08 	add.w	ip, r6, #8
	const float B[adim * rdim] ={ -0.473079,
 80031bc:	e88e 0003 	stmia.w	lr, {r0, r1}
	const float C[ydim * adim] = {-0.0126102,  -0.0065661,  -0.0046448,   0.0032324,   0.0058147,   0.0034044,   0.0013687,   0.0057305,   0.0028195,   0.0014901};
 80031c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80031c4:	f10d 0ec8 	add.w	lr, sp, #200	; 0xc8
 80031c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80031cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80031d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80031d4:	e89c 0003 	ldmia.w	ip, {r0, r1}
	const float K[adim * ydim] = {-0.605326,
 80031d8:	f106 0c30 	add.w	ip, r6, #48	; 0x30
	const float C[ydim * adim] = {-0.0126102,  -0.0065661,  -0.0046448,   0.0032324,   0.0058147,   0.0034044,   0.0013687,   0.0057305,   0.0028195,   0.0014901};
 80031dc:	e88e 0003 	stmia.w	lr, {r0, r1}
	const float K[adim * ydim] = {-0.605326,
 80031e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80031e4:	46d6      	mov	lr, sl
 80031e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80031ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80031ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80031f2:	e89c 0003 	ldmia.w	ip, {r0, r1}
	const float L[rdim * adim] = {-0.748569,   0.336152,  -0.236959,  -0.072548,  -0.077530,  -0.558029,   0.771664,   0.406676,   0.483614,  -0.698279};
 80031f6:	3658      	adds	r6, #88	; 0x58
	const float K[adim * ydim] = {-0.605326,
 80031f8:	e88e 0003 	stmia.w	lr, {r0, r1}
	const float L[rdim * adim] = {-0.748569,   0.336152,  -0.236959,  -0.072548,  -0.077530,  -0.558029,   0.771664,   0.406676,   0.483614,  -0.698279};
 80031fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
	const float D[ydim * rdim] = { 0 };
 80031fe:	f04f 0800 	mov.w	r8, #0
	const float L[rdim * adim] = {-0.748569,   0.336152,  -0.236959,  -0.072548,  -0.077530,  -0.558029,   0.771664,   0.406676,   0.483614,  -0.698279};
 8003202:	f50d 7e8c 	add.w	lr, sp, #280	; 0x118
	const float D[ydim * rdim] = { 0 };
 8003206:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
	const float L[rdim * adim] = {-0.748569,   0.336152,  -0.236959,  -0.072548,  -0.077530,  -0.558029,   0.771664,   0.406676,   0.483614,  -0.698279};
 800320a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800320e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003210:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003214:	e896 0003 	ldmia.w	r6, {r0, r1}
	const float Li[rdim * xn] = {0.39778};
 8003218:	4b41      	ldr	r3, [pc, #260]	; (8003320 <main+0x3a8>)
 800321a:	9319      	str	r3, [sp, #100]	; 0x64
	const float L[rdim * adim] = {-0.748569,   0.336152,  -0.236959,  -0.072548,  -0.077530,  -0.558029,   0.771664,   0.406676,   0.483614,  -0.698279};
 800321c:	e88e 0003 	stmia.w	lr, {r0, r1}
	float x[adim * 1] = {0};
 8003220:	2228      	movs	r2, #40	; 0x28
 8003222:	4621      	mov	r1, r4
 8003224:	4648      	mov	r0, r9
 8003226:	f000 fae2 	bl	80037ee <memset>
 800322a:	462e      	mov	r6, r5
	float r[rdim * 1] = {25}; // <-- This is what we want to see.
 800322c:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <main+0x3ac>)
		uint8_t reference = ((float) adc0) / 1023.0 * 100;
 800322e:	4d3e      	ldr	r5, [pc, #248]	; (8003328 <main+0x3b0>)
	float xi[xn * 1] = {0};
 8003230:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
	float u[rdim * 1] = {0}; // <-- This is our input value we want to have
 8003234:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	float r[rdim * 1] = {25}; // <-- This is what we want to see.
 8003238:	931c      	str	r3, [sp, #112]	; 0x70
	float y[ydim * 1] = {0}; // <-- This is our measurement. Set it.
 800323a:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
		uint8_t reference = ((float) adc0) / 1023.0 * 100;
 800323e:	2400      	movs	r4, #0
		uint16_t adc0 = MCP3008_Read_Channel(1);
 8003240:	2001      	movs	r0, #1
 8003242:	f7ff fe01 	bl	8002e48 <MCP3008_Read_Channel>
		uint8_t reference = ((float) adc0) / 1023.0 * 100;
 8003246:	ee07 0a90 	vmov	s15, r0
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	ee17 0a90 	vmov	r0, s15
 8003252:	f7fd f979 	bl	8000548 <__aeabi_f2d>
 8003256:	a324      	add	r3, pc, #144	; (adr r3, 80032e8 <main+0x370>)
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f7fd faf2 	bl	8000844 <__aeabi_ddiv>
 8003260:	4622      	mov	r2, r4
 8003262:	462b      	mov	r3, r5
 8003264:	f7fd f9c4 	bl	80005f0 <__aeabi_dmul>
 8003268:	f7fd fbd4 	bl	8000a14 <__aeabi_d2uiz>
 800326c:	fa5f f880 	uxtb.w	r8, r0
		uint16_t adc1 = MCP3008_Read_Channel(0);
 8003270:	2000      	movs	r0, #0
 8003272:	f7ff fde9 	bl	8002e48 <MCP3008_Read_Channel>
		float temperature = (((float) adc1) / max_adc * V33 - m) / k;
 8003276:	ee07 0a90 	vmov	s15, r0
 800327a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800327e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800332c <main+0x3b4>
 8003282:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003286:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003330 <main+0x3b8>
 800328a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800328e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003292:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003334 <main+0x3bc>
 8003296:	ee87 8a87 	vdiv.f32	s16, s15, s14
		uint8_t temp_first = (uint8_t) temperature;
 800329a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800329e:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 80032a2:	f89d b05c 	ldrb.w	fp, [sp, #92]	; 0x5c
		uint8_t temp_decimal = (uint8_t) ((temperature - ((float) temp_first)) * 100.0);
 80032a6:	ee07 ba90 	vmov	s15, fp
 80032aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ae:	ee78 7a67 	vsub.f32	s15, s16, s15
 80032b2:	ee17 0a90 	vmov	r0, s15
 80032b6:	f7fd f947 	bl	8000548 <__aeabi_f2d>
 80032ba:	4622      	mov	r2, r4
 80032bc:	462b      	mov	r3, r5
 80032be:	f7fd f997 	bl	80005f0 <__aeabi_dmul>
 80032c2:	f7fd fba7 	bl	8000a14 <__aeabi_d2uiz>
		sprintf(lcd_Text, "Ref:%d T:%d.%d  ", reference, temp_first, temp_decimal); // Important with 2 spaces at the end
 80032c6:	b2c0      	uxtb	r0, r0
 80032c8:	4642      	mov	r2, r8
 80032ca:	465b      	mov	r3, fp
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	491a      	ldr	r1, [pc, #104]	; (8003338 <main+0x3c0>)
 80032d0:	a824      	add	r0, sp, #144	; 0x90
 80032d2:	f000 fa95 	bl	8003800 <siprintf>
		LCD1602_setCursor(2, 1);
 80032d6:	2101      	movs	r1, #1
 80032d8:	2002      	movs	r0, #2
 80032da:	f7ff fd77 	bl	8002dcc <LCD1602_setCursor>
		LCD1602_print(lcd_Text);
 80032de:	a824      	add	r0, sp, #144	; 0x90
 80032e0:	f7ff fd46 	bl	8002d70 <LCD1602_print>
 80032e4:	e02e      	b.n	8003344 <main+0x3cc>
 80032e6:	bf00      	nop
 80032e8:	00000000 	.word	0x00000000
 80032ec:	408ff800 	.word	0x408ff800
 80032f0:	40023800 	.word	0x40023800
 80032f4:	2000020c 	.word	0x2000020c
 80032f8:	200001cc 	.word	0x200001cc
 80032fc:	40005400 	.word	0x40005400
 8003300:	000186a0 	.word	0x000186a0
 8003304:	40013000 	.word	0x40013000
 8003308:	40010000 	.word	0x40010000
 800330c:	20000264 	.word	0x20000264
 8003310:	40004400 	.word	0x40004400
 8003314:	0800426c 	.word	0x0800426c
 8003318:	080041cc 	.word	0x080041cc
 800331c:	0800403c 	.word	0x0800403c
 8003320:	3ecba9d2 	.word	0x3ecba9d2
 8003324:	41c80000 	.word	0x41c80000
 8003328:	40590000 	.word	0x40590000
 800332c:	447fc000 	.word	0x447fc000
 8003330:	40533333 	.word	0x40533333
 8003334:	3c23d70a 	.word	0x3c23d70a
 8003338:	0800427c 	.word	0x0800427c
 800333c:	40020000 	.word	0x40020000
 8003340:	20000178 	.word	0x20000178
		r[0] = (float) (reference);
 8003344:	ab1c      	add	r3, sp, #112	; 0x70
		LQGI(adim, ydim, rdim, xn, A, B, C, D, L, Li, K, u, r, y, x, xi, qi, anti_windup);
 8003346:	9308      	str	r3, [sp, #32]
 8003348:	ab19      	add	r3, sp, #100	; 0x64
 800334a:	9305      	str	r3, [sp, #20]
 800334c:	ab46      	add	r3, sp, #280	; 0x118
 800334e:	9304      	str	r3, [sp, #16]
 8003350:	ab18      	add	r3, sp, #96	; 0x60
		r[0] = (float) (reference);
 8003352:	ee07 8a90 	vmov	s15, r8
		LQGI(adim, ydim, rdim, xn, A, B, C, D, L, Li, K, u, r, y, x, xi, qi, anti_windup);
 8003356:	9303      	str	r3, [sp, #12]
 8003358:	ab32      	add	r3, sp, #200	; 0xc8
 800335a:	2100      	movs	r1, #0
 800335c:	9302      	str	r3, [sp, #8]
 800335e:	ab28      	add	r3, sp, #160	; 0xa0
		r[0] = (float) (reference);
 8003360:	eef8 7a67 	vcvt.f32.u32	s15, s15
		y[0] = temperature;
 8003364:	aa1d      	add	r2, sp, #116	; 0x74
		LQGI(adim, ydim, rdim, xn, A, B, C, D, L, Li, K, u, r, y, x, xi, qi, anti_windup);
 8003366:	910c      	str	r1, [sp, #48]	; 0x30
 8003368:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
 800336c:	a91a      	add	r1, sp, #104	; 0x68
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	2301      	movs	r3, #1
 8003372:	910b      	str	r1, [sp, #44]	; 0x2c
 8003374:	9209      	str	r2, [sp, #36]	; 0x24
 8003376:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800337a:	f8cd 801c 	str.w	r8, [sp, #28]
 800337e:	f8cd a018 	str.w	sl, [sp, #24]
 8003382:	9700      	str	r7, [sp, #0]
 8003384:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003388:	461a      	mov	r2, r3
 800338a:	4619      	mov	r1, r3
 800338c:	200a      	movs	r0, #10
		r[0] = (float) (reference);
 800338e:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
		y[0] = temperature;
 8003392:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
		LQGI(adim, ydim, rdim, xn, A, B, C, D, L, Li, K, u, r, y, x, xi, qi, anti_windup);
 8003396:	f7ff fa21 	bl	80027dc <LQGI>
		if(u[0] < 0){
 800339a:	ed98 7a00 	vldr	s14, [r8]
 800339e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d548      	bpl.n	800343a <main+0x4c2>
			u[0] = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c8 3000 	str.w	r3, [r8]
		uint32_t output = (uint32_t) u[0]; //reference * 0.4; // 0.4 is a tuning parameter for the potentiometer
 80033ae:	edd8 7a00 	vldr	s15, [r8]
		htim1.Instance->CCR1 = output;
 80033b2:	6832      	ldr	r2, [r6, #0]
		uint32_t output = (uint32_t) u[0]; //reference * 0.4; // 0.4 is a tuning parameter for the potentiometer
 80033b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		sendUSB[0] = 0x06; // ACK
 80033b8:	2006      	movs	r0, #6
		uint32_t output = (uint32_t) u[0]; //reference * 0.4; // 0.4 is a tuning parameter for the potentiometer
 80033ba:	ee17 3a90 	vmov	r3, s15
		htim1.Instance->CCR1 = output;
 80033be:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
		adc0 = (uint16_t)r[0];
 80033c2:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
		sendUSB[6] = (adc2 & 0xFF);
 80033c6:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
		adc0 = (uint16_t)r[0];
 80033ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		sendUSB[0] = 0x06; // ACK
 80033ce:	f88d 0080 	strb.w	r0, [sp, #128]	; 0x80
		adc0 = (uint16_t)r[0];
 80033d2:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
		adc1 = (uint16_t) y[0];
 80033d6:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
		adc0 = (uint16_t)r[0];
 80033da:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
		sendUSB[2] = (adc0 & 0xFF);
 80033de:	f88d 1082 	strb.w	r1, [sp, #130]	; 0x82
		adc1 = (uint16_t) y[0];
 80033e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		sendUSB[1] = (adc0 >> 8);
 80033e6:	ea4f 2e11 	mov.w	lr, r1, lsr #8
		adc1 = (uint16_t) y[0];
 80033ea:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 80033ee:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
		sendUSB[4] = (adc1 & 0xFF);
 80033f2:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
		sendUSB[3] = (adc1 >> 8);
 80033f6:	0a11      	lsrs	r1, r2, #8
		sendUSB[5] = (adc2 >> 8);
 80033f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
		sendUSB[7] = 0x0;
 80033fc:	2300      	movs	r3, #0
		sendUSB[3] = (adc1 >> 8);
 80033fe:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
		sendUSB[5] = (adc2 >> 8);
 8003402:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
		sendUSB[7] = 0x0;
 8003406:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
		sendUSB[8] = 0x0;
 800340a:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
		sendUSB[9] = 0x0;
 800340e:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
		sendUSB[10] = 0x0;
 8003412:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
		sendUSB[11] = 0x0;
 8003416:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
		sendUSB[12] = 0x0;
 800341a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
		sendUSB[13] = 0x06; // ACK
 800341e:	f88d 008d 	strb.w	r0, [sp, #141]	; 0x8d
		HAL_UART_Transmit(&huart2, sendUSB, 14, 10);
 8003422:	230a      	movs	r3, #10
 8003424:	220e      	movs	r2, #14
 8003426:	a920      	add	r1, sp, #128	; 0x80
 8003428:	4809      	ldr	r0, [pc, #36]	; (8003450 <main+0x4d8>)
		sendUSB[1] = (adc0 >> 8);
 800342a:	f88d e081 	strb.w	lr, [sp, #129]	; 0x81
		HAL_UART_Transmit(&huart2, sendUSB, 14, 10);
 800342e:	f7ff f955 	bl	80026dc <HAL_UART_Transmit>
		HAL_Delay(131);
 8003432:	2083      	movs	r0, #131	; 0x83
 8003434:	f7fd fce6 	bl	8000e04 <HAL_Delay>
	while (1) {
 8003438:	e702      	b.n	8003240 <main+0x2c8>
		}else if(u[0] > 100){
 800343a:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003454 <main+0x4dc>
 800343e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			u[0] = 100;
 8003446:	bfc8      	it	gt
 8003448:	edc8 7a00 	vstrgt	s15, [r8]
 800344c:	e7af      	b.n	80033ae <main+0x436>
 800344e:	bf00      	nop
 8003450:	20000264 	.word	0x20000264
 8003454:	42c80000 	.word	0x42c80000

08003458 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003458:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_MspInit+0x3c>)
 800345c:	2100      	movs	r1, #0
 800345e:	9100      	str	r1, [sp, #0]
 8003460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003466:	645a      	str	r2, [r3, #68]	; 0x44
 8003468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800346e:	9200      	str	r2, [sp, #0]
 8003470:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	9101      	str	r1, [sp, #4]
 8003474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003476:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003484:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003488:	f7fd fcd0 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800348c:	b003      	add	sp, #12
 800348e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800

08003498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003498:	b530      	push	{r4, r5, lr}
 800349a:	4604      	mov	r4, r0
 800349c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349e:	2214      	movs	r2, #20
 80034a0:	2100      	movs	r1, #0
 80034a2:	a803      	add	r0, sp, #12
 80034a4:	f000 f9a3 	bl	80037ee <memset>
  if(hi2c->Instance==I2C1)
 80034a8:	6822      	ldr	r2, [r4, #0]
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <HAL_I2C_MspInit+0x68>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d124      	bne.n	80034fa <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b0:	4c14      	ldr	r4, [pc, #80]	; (8003504 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b2:	4815      	ldr	r0, [pc, #84]	; (8003508 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b4:	2500      	movs	r5, #0
 80034b6:	9501      	str	r5, [sp, #4]
 80034b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	6323      	str	r3, [r4, #48]	; 0x30
 80034c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034d0:	2312      	movs	r3, #18
 80034d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d4:	2301      	movs	r3, #1
 80034d6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d8:	2303      	movs	r3, #3
 80034da:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034de:	2304      	movs	r3, #4
 80034e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e2:	f7fd fcff 	bl	8000ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034e6:	9502      	str	r5, [sp, #8]
 80034e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034ee:	6423      	str	r3, [r4, #64]	; 0x40
 80034f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f6:	9302      	str	r3, [sp, #8]
 80034f8:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034fa:	b009      	add	sp, #36	; 0x24
 80034fc:	bd30      	pop	{r4, r5, pc}
 80034fe:	bf00      	nop
 8003500:	40005400 	.word	0x40005400
 8003504:	40023800 	.word	0x40023800
 8003508:	40020400 	.word	0x40020400

0800350c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350e:	4604      	mov	r4, r0
 8003510:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003512:	2214      	movs	r2, #20
 8003514:	2100      	movs	r1, #0
 8003516:	a803      	add	r0, sp, #12
 8003518:	f000 f969 	bl	80037ee <memset>
  if(hspi->Instance==SPI1)
 800351c:	6822      	ldr	r2, [r4, #0]
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <HAL_SPI_MspInit+0x8c>)
 8003520:	429a      	cmp	r2, r3
 8003522:	d136      	bne.n	8003592 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003524:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003528:	2400      	movs	r4, #0
 800352a:	9400      	str	r4, [sp, #0]
 800352c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352e:	481b      	ldr	r0, [pc, #108]	; (800359c <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003530:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
 8003536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003538:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800353c:	9200      	str	r2, [sp, #0]
 800353e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003540:	9401      	str	r4, [sp, #4]
 8003542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
 800354a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354c:	f002 0201 	and.w	r2, r2, #1
 8003550:	9201      	str	r2, [sp, #4]
 8003552:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003554:	9402      	str	r4, [sp, #8]
 8003556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003558:	f042 0202 	orr.w	r2, r2, #2
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	9302      	str	r3, [sp, #8]
 8003566:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800356a:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800356e:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003570:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003572:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003576:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003578:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	f7fd fcb3 	bl	8000ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800357e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003580:	a903      	add	r1, sp, #12
 8003582:	4807      	ldr	r0, [pc, #28]	; (80035a0 <HAL_SPI_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003584:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003586:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800358c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358e:	f7fd fca9 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003592:	b009      	add	sp, #36	; 0x24
 8003594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003596:	bf00      	nop
 8003598:	40013000 	.word	0x40013000
 800359c:	40020000 	.word	0x40020000
 80035a0:	40020400 	.word	0x40020400

080035a4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80035a4:	6802      	ldr	r2, [r0, #0]
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_TIM_Base_MspInit+0x28>)
 80035a8:	429a      	cmp	r2, r3
{
 80035aa:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80035ac:	d10b      	bne.n	80035c6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_TIM_Base_MspInit+0x2c>)
 80035b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80035c6:	b002      	add	sp, #8
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40023800 	.word	0x40023800

080035d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035d4:	b510      	push	{r4, lr}
 80035d6:	4604      	mov	r4, r0
 80035d8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035da:	2214      	movs	r2, #20
 80035dc:	2100      	movs	r1, #0
 80035de:	a801      	add	r0, sp, #4
 80035e0:	f000 f905 	bl	80037ee <memset>
  if(htim->Instance==TIM1)
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <HAL_TIM_MspPostInit+0x4c>)
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d116      	bne.n	800361a <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ec:	2300      	movs	r3, #0
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pin = PWM_Fan_Open_Drain_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(PWM_Fan_Open_Drain_GPIO_Port, &GPIO_InitStruct);
 80035f2:	480d      	ldr	r0, [pc, #52]	; (8003628 <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_Fan_Open_Drain_Pin;
 8003606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800360a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800360c:	2312      	movs	r3, #18
 800360e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(PWM_Fan_Open_Drain_GPIO_Port, &GPIO_InitStruct);
 8003610:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003612:	2301      	movs	r3, #1
 8003614:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_Fan_Open_Drain_GPIO_Port, &GPIO_InitStruct);
 8003616:	f7fd fc65 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800361a:	b006      	add	sp, #24
 800361c:	bd10      	pop	{r4, pc}
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40023800 	.word	0x40023800
 8003628:	40020000 	.word	0x40020000

0800362c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800362c:	b510      	push	{r4, lr}
 800362e:	4604      	mov	r4, r0
 8003630:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003632:	2214      	movs	r2, #20
 8003634:	2100      	movs	r1, #0
 8003636:	a803      	add	r0, sp, #12
 8003638:	f000 f8d9 	bl	80037ee <memset>
  if(huart->Instance==USART2)
 800363c:	6822      	ldr	r2, [r4, #0]
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <HAL_UART_MspInit+0x68>)
 8003640:	429a      	cmp	r2, r3
 8003642:	d124      	bne.n	800368e <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003644:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003648:	2100      	movs	r1, #0
 800364a:	9101      	str	r1, [sp, #4]
 800364c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364e:	4812      	ldr	r0, [pc, #72]	; (8003698 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003650:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
 8003656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003658:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800365c:	9201      	str	r2, [sp, #4]
 800365e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003660:	9102      	str	r1, [sp, #8]
 8003662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	9302      	str	r3, [sp, #8]
 8003672:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003674:	230c      	movs	r3, #12
 8003676:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800367c:	2301      	movs	r3, #1
 800367e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003680:	2303      	movs	r3, #3
 8003682:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003684:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003686:	2307      	movs	r3, #7
 8003688:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f7fd fc2b 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800368e:	b008      	add	sp, #32
 8003690:	bd10      	pop	{r4, pc}
 8003692:	bf00      	nop
 8003694:	40004400 	.word	0x40004400
 8003698:	40020000 	.word	0x40020000

0800369c <NMI_Handler>:
 800369c:	4770      	bx	lr

0800369e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800369e:	e7fe      	b.n	800369e <HardFault_Handler>

080036a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036a0:	e7fe      	b.n	80036a0 <MemManage_Handler>

080036a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036a2:	e7fe      	b.n	80036a2 <BusFault_Handler>

080036a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a4:	e7fe      	b.n	80036a4 <UsageFault_Handler>

080036a6 <SVC_Handler>:
 80036a6:	4770      	bx	lr

080036a8 <DebugMon_Handler>:
 80036a8:	4770      	bx	lr

080036aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036aa:	4770      	bx	lr

080036ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ac:	f7fd bb98 	b.w	8000de0 <HAL_IncTick>

080036b0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80036b0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <_sbrk+0x2c>)
 80036b4:	6819      	ldr	r1, [r3, #0]
{
 80036b6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80036b8:	b909      	cbnz	r1, 80036be <_sbrk+0xe>
		heap_end = &end;
 80036ba:	4909      	ldr	r1, [pc, #36]	; (80036e0 <_sbrk+0x30>)
 80036bc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80036be:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80036c0:	4669      	mov	r1, sp
 80036c2:	4402      	add	r2, r0
 80036c4:	428a      	cmp	r2, r1
 80036c6:	d906      	bls.n	80036d6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80036c8:	f000 f85c 	bl	8003784 <__errno>
 80036cc:	230c      	movs	r3, #12
 80036ce:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80036d6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80036d8:	bd08      	pop	{r3, pc}
 80036da:	bf00      	nop
 80036dc:	20000158 	.word	0x20000158
 80036e0:	200002a8 	.word	0x200002a8

080036e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e4:	490f      	ldr	r1, [pc, #60]	; (8003724 <SystemInit+0x40>)
 80036e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80036ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <SystemInit+0x44>)
 80036f4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80036f6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80036fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003706:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800370a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800370c:	4a07      	ldr	r2, [pc, #28]	; (800372c <SystemInit+0x48>)
 800370e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003716:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003718:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800371a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800371e:	608b      	str	r3, [r1, #8]
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000ed00 	.word	0xe000ed00
 8003728:	40023800 	.word	0x40023800
 800372c:	24003010 	.word	0x24003010

08003730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003768 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003734:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003736:	e003      	b.n	8003740 <LoopCopyDataInit>

08003738 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800373a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800373c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800373e:	3104      	adds	r1, #4

08003740 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003740:	480b      	ldr	r0, [pc, #44]	; (8003770 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003744:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003746:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003748:	d3f6      	bcc.n	8003738 <CopyDataInit>
  ldr  r2, =_sbss
 800374a:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800374c:	e002      	b.n	8003754 <LoopFillZerobss>

0800374e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800374e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003750:	f842 3b04 	str.w	r3, [r2], #4

08003754 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003756:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003758:	d3f9      	bcc.n	800374e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800375a:	f7ff ffc3 	bl	80036e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800375e:	f000 f817 	bl	8003790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003762:	f7ff fc09 	bl	8002f78 <main>
  bx  lr    
 8003766:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003768:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800376c:	080042e8 	.word	0x080042e8
  ldr  r0, =_sdata
 8003770:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003774:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8003778:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800377c:	200002a8 	.word	0x200002a8

08003780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003780:	e7fe      	b.n	8003780 <ADC_IRQHandler>
	...

08003784 <__errno>:
 8003784:	4b01      	ldr	r3, [pc, #4]	; (800378c <__errno+0x8>)
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000014 	.word	0x20000014

08003790 <__libc_init_array>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	4e0d      	ldr	r6, [pc, #52]	; (80037c8 <__libc_init_array+0x38>)
 8003794:	4c0d      	ldr	r4, [pc, #52]	; (80037cc <__libc_init_array+0x3c>)
 8003796:	1ba4      	subs	r4, r4, r6
 8003798:	10a4      	asrs	r4, r4, #2
 800379a:	2500      	movs	r5, #0
 800379c:	42a5      	cmp	r5, r4
 800379e:	d109      	bne.n	80037b4 <__libc_init_array+0x24>
 80037a0:	4e0b      	ldr	r6, [pc, #44]	; (80037d0 <__libc_init_array+0x40>)
 80037a2:	4c0c      	ldr	r4, [pc, #48]	; (80037d4 <__libc_init_array+0x44>)
 80037a4:	f000 fc3e 	bl	8004024 <_init>
 80037a8:	1ba4      	subs	r4, r4, r6
 80037aa:	10a4      	asrs	r4, r4, #2
 80037ac:	2500      	movs	r5, #0
 80037ae:	42a5      	cmp	r5, r4
 80037b0:	d105      	bne.n	80037be <__libc_init_array+0x2e>
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037b8:	4798      	blx	r3
 80037ba:	3501      	adds	r5, #1
 80037bc:	e7ee      	b.n	800379c <__libc_init_array+0xc>
 80037be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037c2:	4798      	blx	r3
 80037c4:	3501      	adds	r5, #1
 80037c6:	e7f2      	b.n	80037ae <__libc_init_array+0x1e>
 80037c8:	080042e0 	.word	0x080042e0
 80037cc:	080042e0 	.word	0x080042e0
 80037d0:	080042e0 	.word	0x080042e0
 80037d4:	080042e4 	.word	0x080042e4

080037d8 <memcpy>:
 80037d8:	b510      	push	{r4, lr}
 80037da:	1e43      	subs	r3, r0, #1
 80037dc:	440a      	add	r2, r1
 80037de:	4291      	cmp	r1, r2
 80037e0:	d100      	bne.n	80037e4 <memcpy+0xc>
 80037e2:	bd10      	pop	{r4, pc}
 80037e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ec:	e7f7      	b.n	80037de <memcpy+0x6>

080037ee <memset>:
 80037ee:	4402      	add	r2, r0
 80037f0:	4603      	mov	r3, r0
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d100      	bne.n	80037f8 <memset+0xa>
 80037f6:	4770      	bx	lr
 80037f8:	f803 1b01 	strb.w	r1, [r3], #1
 80037fc:	e7f9      	b.n	80037f2 <memset+0x4>
	...

08003800 <siprintf>:
 8003800:	b40e      	push	{r1, r2, r3}
 8003802:	b500      	push	{lr}
 8003804:	b09c      	sub	sp, #112	; 0x70
 8003806:	f44f 7102 	mov.w	r1, #520	; 0x208
 800380a:	ab1d      	add	r3, sp, #116	; 0x74
 800380c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003810:	9002      	str	r0, [sp, #8]
 8003812:	9006      	str	r0, [sp, #24]
 8003814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003818:	480a      	ldr	r0, [pc, #40]	; (8003844 <siprintf+0x44>)
 800381a:	9104      	str	r1, [sp, #16]
 800381c:	9107      	str	r1, [sp, #28]
 800381e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003822:	f853 2b04 	ldr.w	r2, [r3], #4
 8003826:	f8ad 1016 	strh.w	r1, [sp, #22]
 800382a:	6800      	ldr	r0, [r0, #0]
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	a902      	add	r1, sp, #8
 8003830:	f000 f866 	bl	8003900 <_svfiprintf_r>
 8003834:	9b02      	ldr	r3, [sp, #8]
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	b01c      	add	sp, #112	; 0x70
 800383c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003840:	b003      	add	sp, #12
 8003842:	4770      	bx	lr
 8003844:	20000014 	.word	0x20000014

08003848 <__ssputs_r>:
 8003848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	688e      	ldr	r6, [r1, #8]
 800384e:	429e      	cmp	r6, r3
 8003850:	4682      	mov	sl, r0
 8003852:	460c      	mov	r4, r1
 8003854:	4691      	mov	r9, r2
 8003856:	4698      	mov	r8, r3
 8003858:	d835      	bhi.n	80038c6 <__ssputs_r+0x7e>
 800385a:	898a      	ldrh	r2, [r1, #12]
 800385c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003860:	d031      	beq.n	80038c6 <__ssputs_r+0x7e>
 8003862:	6825      	ldr	r5, [r4, #0]
 8003864:	6909      	ldr	r1, [r1, #16]
 8003866:	1a6f      	subs	r7, r5, r1
 8003868:	6965      	ldr	r5, [r4, #20]
 800386a:	2302      	movs	r3, #2
 800386c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003870:	fb95 f5f3 	sdiv	r5, r5, r3
 8003874:	f108 0301 	add.w	r3, r8, #1
 8003878:	443b      	add	r3, r7
 800387a:	429d      	cmp	r5, r3
 800387c:	bf38      	it	cc
 800387e:	461d      	movcc	r5, r3
 8003880:	0553      	lsls	r3, r2, #21
 8003882:	d531      	bpl.n	80038e8 <__ssputs_r+0xa0>
 8003884:	4629      	mov	r1, r5
 8003886:	f000 fb2d 	bl	8003ee4 <_malloc_r>
 800388a:	4606      	mov	r6, r0
 800388c:	b950      	cbnz	r0, 80038a4 <__ssputs_r+0x5c>
 800388e:	230c      	movs	r3, #12
 8003890:	f8ca 3000 	str.w	r3, [sl]
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a4:	463a      	mov	r2, r7
 80038a6:	6921      	ldr	r1, [r4, #16]
 80038a8:	f7ff ff96 	bl	80037d8 <memcpy>
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b6:	81a3      	strh	r3, [r4, #12]
 80038b8:	6126      	str	r6, [r4, #16]
 80038ba:	6165      	str	r5, [r4, #20]
 80038bc:	443e      	add	r6, r7
 80038be:	1bed      	subs	r5, r5, r7
 80038c0:	6026      	str	r6, [r4, #0]
 80038c2:	60a5      	str	r5, [r4, #8]
 80038c4:	4646      	mov	r6, r8
 80038c6:	4546      	cmp	r6, r8
 80038c8:	bf28      	it	cs
 80038ca:	4646      	movcs	r6, r8
 80038cc:	4632      	mov	r2, r6
 80038ce:	4649      	mov	r1, r9
 80038d0:	6820      	ldr	r0, [r4, #0]
 80038d2:	f000 fa9f 	bl	8003e14 <memmove>
 80038d6:	68a3      	ldr	r3, [r4, #8]
 80038d8:	1b9b      	subs	r3, r3, r6
 80038da:	60a3      	str	r3, [r4, #8]
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	441e      	add	r6, r3
 80038e0:	6026      	str	r6, [r4, #0]
 80038e2:	2000      	movs	r0, #0
 80038e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e8:	462a      	mov	r2, r5
 80038ea:	f000 fb59 	bl	8003fa0 <_realloc_r>
 80038ee:	4606      	mov	r6, r0
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d1e1      	bne.n	80038b8 <__ssputs_r+0x70>
 80038f4:	6921      	ldr	r1, [r4, #16]
 80038f6:	4650      	mov	r0, sl
 80038f8:	f000 faa6 	bl	8003e48 <_free_r>
 80038fc:	e7c7      	b.n	800388e <__ssputs_r+0x46>
	...

08003900 <_svfiprintf_r>:
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003904:	b09d      	sub	sp, #116	; 0x74
 8003906:	4680      	mov	r8, r0
 8003908:	9303      	str	r3, [sp, #12]
 800390a:	898b      	ldrh	r3, [r1, #12]
 800390c:	061c      	lsls	r4, r3, #24
 800390e:	460d      	mov	r5, r1
 8003910:	4616      	mov	r6, r2
 8003912:	d50f      	bpl.n	8003934 <_svfiprintf_r+0x34>
 8003914:	690b      	ldr	r3, [r1, #16]
 8003916:	b96b      	cbnz	r3, 8003934 <_svfiprintf_r+0x34>
 8003918:	2140      	movs	r1, #64	; 0x40
 800391a:	f000 fae3 	bl	8003ee4 <_malloc_r>
 800391e:	6028      	str	r0, [r5, #0]
 8003920:	6128      	str	r0, [r5, #16]
 8003922:	b928      	cbnz	r0, 8003930 <_svfiprintf_r+0x30>
 8003924:	230c      	movs	r3, #12
 8003926:	f8c8 3000 	str.w	r3, [r8]
 800392a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800392e:	e0c5      	b.n	8003abc <_svfiprintf_r+0x1bc>
 8003930:	2340      	movs	r3, #64	; 0x40
 8003932:	616b      	str	r3, [r5, #20]
 8003934:	2300      	movs	r3, #0
 8003936:	9309      	str	r3, [sp, #36]	; 0x24
 8003938:	2320      	movs	r3, #32
 800393a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800393e:	2330      	movs	r3, #48	; 0x30
 8003940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003944:	f04f 0b01 	mov.w	fp, #1
 8003948:	4637      	mov	r7, r6
 800394a:	463c      	mov	r4, r7
 800394c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13c      	bne.n	80039ce <_svfiprintf_r+0xce>
 8003954:	ebb7 0a06 	subs.w	sl, r7, r6
 8003958:	d00b      	beq.n	8003972 <_svfiprintf_r+0x72>
 800395a:	4653      	mov	r3, sl
 800395c:	4632      	mov	r2, r6
 800395e:	4629      	mov	r1, r5
 8003960:	4640      	mov	r0, r8
 8003962:	f7ff ff71 	bl	8003848 <__ssputs_r>
 8003966:	3001      	adds	r0, #1
 8003968:	f000 80a3 	beq.w	8003ab2 <_svfiprintf_r+0x1b2>
 800396c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800396e:	4453      	add	r3, sl
 8003970:	9309      	str	r3, [sp, #36]	; 0x24
 8003972:	783b      	ldrb	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 809c 	beq.w	8003ab2 <_svfiprintf_r+0x1b2>
 800397a:	2300      	movs	r3, #0
 800397c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003980:	9304      	str	r3, [sp, #16]
 8003982:	9307      	str	r3, [sp, #28]
 8003984:	9205      	str	r2, [sp, #20]
 8003986:	9306      	str	r3, [sp, #24]
 8003988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800398c:	931a      	str	r3, [sp, #104]	; 0x68
 800398e:	2205      	movs	r2, #5
 8003990:	7821      	ldrb	r1, [r4, #0]
 8003992:	4850      	ldr	r0, [pc, #320]	; (8003ad4 <_svfiprintf_r+0x1d4>)
 8003994:	f7fc fc24 	bl	80001e0 <memchr>
 8003998:	1c67      	adds	r7, r4, #1
 800399a:	9b04      	ldr	r3, [sp, #16]
 800399c:	b9d8      	cbnz	r0, 80039d6 <_svfiprintf_r+0xd6>
 800399e:	06d9      	lsls	r1, r3, #27
 80039a0:	bf44      	itt	mi
 80039a2:	2220      	movmi	r2, #32
 80039a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039a8:	071a      	lsls	r2, r3, #28
 80039aa:	bf44      	itt	mi
 80039ac:	222b      	movmi	r2, #43	; 0x2b
 80039ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039b2:	7822      	ldrb	r2, [r4, #0]
 80039b4:	2a2a      	cmp	r2, #42	; 0x2a
 80039b6:	d016      	beq.n	80039e6 <_svfiprintf_r+0xe6>
 80039b8:	9a07      	ldr	r2, [sp, #28]
 80039ba:	2100      	movs	r1, #0
 80039bc:	200a      	movs	r0, #10
 80039be:	4627      	mov	r7, r4
 80039c0:	3401      	adds	r4, #1
 80039c2:	783b      	ldrb	r3, [r7, #0]
 80039c4:	3b30      	subs	r3, #48	; 0x30
 80039c6:	2b09      	cmp	r3, #9
 80039c8:	d951      	bls.n	8003a6e <_svfiprintf_r+0x16e>
 80039ca:	b1c9      	cbz	r1, 8003a00 <_svfiprintf_r+0x100>
 80039cc:	e011      	b.n	80039f2 <_svfiprintf_r+0xf2>
 80039ce:	2b25      	cmp	r3, #37	; 0x25
 80039d0:	d0c0      	beq.n	8003954 <_svfiprintf_r+0x54>
 80039d2:	4627      	mov	r7, r4
 80039d4:	e7b9      	b.n	800394a <_svfiprintf_r+0x4a>
 80039d6:	4a3f      	ldr	r2, [pc, #252]	; (8003ad4 <_svfiprintf_r+0x1d4>)
 80039d8:	1a80      	subs	r0, r0, r2
 80039da:	fa0b f000 	lsl.w	r0, fp, r0
 80039de:	4318      	orrs	r0, r3
 80039e0:	9004      	str	r0, [sp, #16]
 80039e2:	463c      	mov	r4, r7
 80039e4:	e7d3      	b.n	800398e <_svfiprintf_r+0x8e>
 80039e6:	9a03      	ldr	r2, [sp, #12]
 80039e8:	1d11      	adds	r1, r2, #4
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	9103      	str	r1, [sp, #12]
 80039ee:	2a00      	cmp	r2, #0
 80039f0:	db01      	blt.n	80039f6 <_svfiprintf_r+0xf6>
 80039f2:	9207      	str	r2, [sp, #28]
 80039f4:	e004      	b.n	8003a00 <_svfiprintf_r+0x100>
 80039f6:	4252      	negs	r2, r2
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	9207      	str	r2, [sp, #28]
 80039fe:	9304      	str	r3, [sp, #16]
 8003a00:	783b      	ldrb	r3, [r7, #0]
 8003a02:	2b2e      	cmp	r3, #46	; 0x2e
 8003a04:	d10e      	bne.n	8003a24 <_svfiprintf_r+0x124>
 8003a06:	787b      	ldrb	r3, [r7, #1]
 8003a08:	2b2a      	cmp	r3, #42	; 0x2a
 8003a0a:	f107 0101 	add.w	r1, r7, #1
 8003a0e:	d132      	bne.n	8003a76 <_svfiprintf_r+0x176>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	9203      	str	r2, [sp, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bfb8      	it	lt
 8003a1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a20:	3702      	adds	r7, #2
 8003a22:	9305      	str	r3, [sp, #20]
 8003a24:	4c2c      	ldr	r4, [pc, #176]	; (8003ad8 <_svfiprintf_r+0x1d8>)
 8003a26:	7839      	ldrb	r1, [r7, #0]
 8003a28:	2203      	movs	r2, #3
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f7fc fbd8 	bl	80001e0 <memchr>
 8003a30:	b138      	cbz	r0, 8003a42 <_svfiprintf_r+0x142>
 8003a32:	2340      	movs	r3, #64	; 0x40
 8003a34:	1b00      	subs	r0, r0, r4
 8003a36:	fa03 f000 	lsl.w	r0, r3, r0
 8003a3a:	9b04      	ldr	r3, [sp, #16]
 8003a3c:	4303      	orrs	r3, r0
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	3701      	adds	r7, #1
 8003a42:	7839      	ldrb	r1, [r7, #0]
 8003a44:	4825      	ldr	r0, [pc, #148]	; (8003adc <_svfiprintf_r+0x1dc>)
 8003a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a4a:	2206      	movs	r2, #6
 8003a4c:	1c7e      	adds	r6, r7, #1
 8003a4e:	f7fc fbc7 	bl	80001e0 <memchr>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d035      	beq.n	8003ac2 <_svfiprintf_r+0x1c2>
 8003a56:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <_svfiprintf_r+0x1e0>)
 8003a58:	b9fb      	cbnz	r3, 8003a9a <_svfiprintf_r+0x19a>
 8003a5a:	9b03      	ldr	r3, [sp, #12]
 8003a5c:	3307      	adds	r3, #7
 8003a5e:	f023 0307 	bic.w	r3, r3, #7
 8003a62:	3308      	adds	r3, #8
 8003a64:	9303      	str	r3, [sp, #12]
 8003a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a68:	444b      	add	r3, r9
 8003a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6c:	e76c      	b.n	8003948 <_svfiprintf_r+0x48>
 8003a6e:	fb00 3202 	mla	r2, r0, r2, r3
 8003a72:	2101      	movs	r1, #1
 8003a74:	e7a3      	b.n	80039be <_svfiprintf_r+0xbe>
 8003a76:	2300      	movs	r3, #0
 8003a78:	9305      	str	r3, [sp, #20]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	240a      	movs	r4, #10
 8003a7e:	460f      	mov	r7, r1
 8003a80:	3101      	adds	r1, #1
 8003a82:	783a      	ldrb	r2, [r7, #0]
 8003a84:	3a30      	subs	r2, #48	; 0x30
 8003a86:	2a09      	cmp	r2, #9
 8003a88:	d903      	bls.n	8003a92 <_svfiprintf_r+0x192>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ca      	beq.n	8003a24 <_svfiprintf_r+0x124>
 8003a8e:	9005      	str	r0, [sp, #20]
 8003a90:	e7c8      	b.n	8003a24 <_svfiprintf_r+0x124>
 8003a92:	fb04 2000 	mla	r0, r4, r0, r2
 8003a96:	2301      	movs	r3, #1
 8003a98:	e7f1      	b.n	8003a7e <_svfiprintf_r+0x17e>
 8003a9a:	ab03      	add	r3, sp, #12
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	462a      	mov	r2, r5
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <_svfiprintf_r+0x1e4>)
 8003aa2:	a904      	add	r1, sp, #16
 8003aa4:	4640      	mov	r0, r8
 8003aa6:	f3af 8000 	nop.w
 8003aaa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003aae:	4681      	mov	r9, r0
 8003ab0:	d1d9      	bne.n	8003a66 <_svfiprintf_r+0x166>
 8003ab2:	89ab      	ldrh	r3, [r5, #12]
 8003ab4:	065b      	lsls	r3, r3, #25
 8003ab6:	f53f af38 	bmi.w	800392a <_svfiprintf_r+0x2a>
 8003aba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003abc:	b01d      	add	sp, #116	; 0x74
 8003abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac2:	ab03      	add	r3, sp, #12
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	462a      	mov	r2, r5
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <_svfiprintf_r+0x1e4>)
 8003aca:	a904      	add	r1, sp, #16
 8003acc:	4640      	mov	r0, r8
 8003ace:	f000 f881 	bl	8003bd4 <_printf_i>
 8003ad2:	e7ea      	b.n	8003aaa <_svfiprintf_r+0x1aa>
 8003ad4:	080042a5 	.word	0x080042a5
 8003ad8:	080042ab 	.word	0x080042ab
 8003adc:	080042af 	.word	0x080042af
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	08003849 	.word	0x08003849

08003ae8 <_printf_common>:
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	4691      	mov	r9, r2
 8003aee:	461f      	mov	r7, r3
 8003af0:	688a      	ldr	r2, [r1, #8]
 8003af2:	690b      	ldr	r3, [r1, #16]
 8003af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003af8:	4293      	cmp	r3, r2
 8003afa:	bfb8      	it	lt
 8003afc:	4613      	movlt	r3, r2
 8003afe:	f8c9 3000 	str.w	r3, [r9]
 8003b02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b06:	4606      	mov	r6, r0
 8003b08:	460c      	mov	r4, r1
 8003b0a:	b112      	cbz	r2, 8003b12 <_printf_common+0x2a>
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	f8c9 3000 	str.w	r3, [r9]
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	0699      	lsls	r1, r3, #26
 8003b16:	bf42      	ittt	mi
 8003b18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b1c:	3302      	addmi	r3, #2
 8003b1e:	f8c9 3000 	strmi.w	r3, [r9]
 8003b22:	6825      	ldr	r5, [r4, #0]
 8003b24:	f015 0506 	ands.w	r5, r5, #6
 8003b28:	d107      	bne.n	8003b3a <_printf_common+0x52>
 8003b2a:	f104 0a19 	add.w	sl, r4, #25
 8003b2e:	68e3      	ldr	r3, [r4, #12]
 8003b30:	f8d9 2000 	ldr.w	r2, [r9]
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	429d      	cmp	r5, r3
 8003b38:	db29      	blt.n	8003b8e <_printf_common+0xa6>
 8003b3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b3e:	6822      	ldr	r2, [r4, #0]
 8003b40:	3300      	adds	r3, #0
 8003b42:	bf18      	it	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	0692      	lsls	r2, r2, #26
 8003b48:	d42e      	bmi.n	8003ba8 <_printf_common+0xc0>
 8003b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b4e:	4639      	mov	r1, r7
 8003b50:	4630      	mov	r0, r6
 8003b52:	47c0      	blx	r8
 8003b54:	3001      	adds	r0, #1
 8003b56:	d021      	beq.n	8003b9c <_printf_common+0xb4>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	68e5      	ldr	r5, [r4, #12]
 8003b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8003b60:	f003 0306 	and.w	r3, r3, #6
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	bf08      	it	eq
 8003b68:	1aad      	subeq	r5, r5, r2
 8003b6a:	68a3      	ldr	r3, [r4, #8]
 8003b6c:	6922      	ldr	r2, [r4, #16]
 8003b6e:	bf0c      	ite	eq
 8003b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b74:	2500      	movne	r5, #0
 8003b76:	4293      	cmp	r3, r2
 8003b78:	bfc4      	itt	gt
 8003b7a:	1a9b      	subgt	r3, r3, r2
 8003b7c:	18ed      	addgt	r5, r5, r3
 8003b7e:	f04f 0900 	mov.w	r9, #0
 8003b82:	341a      	adds	r4, #26
 8003b84:	454d      	cmp	r5, r9
 8003b86:	d11b      	bne.n	8003bc0 <_printf_common+0xd8>
 8003b88:	2000      	movs	r0, #0
 8003b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4652      	mov	r2, sl
 8003b92:	4639      	mov	r1, r7
 8003b94:	4630      	mov	r0, r6
 8003b96:	47c0      	blx	r8
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d103      	bne.n	8003ba4 <_printf_common+0xbc>
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	e7c2      	b.n	8003b2e <_printf_common+0x46>
 8003ba8:	18e1      	adds	r1, r4, r3
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	2030      	movs	r0, #48	; 0x30
 8003bae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bb2:	4422      	add	r2, r4
 8003bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	e7c4      	b.n	8003b4a <_printf_common+0x62>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	4639      	mov	r1, r7
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	47c0      	blx	r8
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d0e6      	beq.n	8003b9c <_printf_common+0xb4>
 8003bce:	f109 0901 	add.w	r9, r9, #1
 8003bd2:	e7d7      	b.n	8003b84 <_printf_common+0x9c>

08003bd4 <_printf_i>:
 8003bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bd8:	4617      	mov	r7, r2
 8003bda:	7e0a      	ldrb	r2, [r1, #24]
 8003bdc:	b085      	sub	sp, #20
 8003bde:	2a6e      	cmp	r2, #110	; 0x6e
 8003be0:	4698      	mov	r8, r3
 8003be2:	4606      	mov	r6, r0
 8003be4:	460c      	mov	r4, r1
 8003be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003be8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003bec:	f000 80bc 	beq.w	8003d68 <_printf_i+0x194>
 8003bf0:	d81a      	bhi.n	8003c28 <_printf_i+0x54>
 8003bf2:	2a63      	cmp	r2, #99	; 0x63
 8003bf4:	d02e      	beq.n	8003c54 <_printf_i+0x80>
 8003bf6:	d80a      	bhi.n	8003c0e <_printf_i+0x3a>
 8003bf8:	2a00      	cmp	r2, #0
 8003bfa:	f000 80c8 	beq.w	8003d8e <_printf_i+0x1ba>
 8003bfe:	2a58      	cmp	r2, #88	; 0x58
 8003c00:	f000 808a 	beq.w	8003d18 <_printf_i+0x144>
 8003c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c08:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003c0c:	e02a      	b.n	8003c64 <_printf_i+0x90>
 8003c0e:	2a64      	cmp	r2, #100	; 0x64
 8003c10:	d001      	beq.n	8003c16 <_printf_i+0x42>
 8003c12:	2a69      	cmp	r2, #105	; 0x69
 8003c14:	d1f6      	bne.n	8003c04 <_printf_i+0x30>
 8003c16:	6821      	ldr	r1, [r4, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c1e:	d023      	beq.n	8003c68 <_printf_i+0x94>
 8003c20:	1d11      	adds	r1, r2, #4
 8003c22:	6019      	str	r1, [r3, #0]
 8003c24:	6813      	ldr	r3, [r2, #0]
 8003c26:	e027      	b.n	8003c78 <_printf_i+0xa4>
 8003c28:	2a73      	cmp	r2, #115	; 0x73
 8003c2a:	f000 80b4 	beq.w	8003d96 <_printf_i+0x1c2>
 8003c2e:	d808      	bhi.n	8003c42 <_printf_i+0x6e>
 8003c30:	2a6f      	cmp	r2, #111	; 0x6f
 8003c32:	d02a      	beq.n	8003c8a <_printf_i+0xb6>
 8003c34:	2a70      	cmp	r2, #112	; 0x70
 8003c36:	d1e5      	bne.n	8003c04 <_printf_i+0x30>
 8003c38:	680a      	ldr	r2, [r1, #0]
 8003c3a:	f042 0220 	orr.w	r2, r2, #32
 8003c3e:	600a      	str	r2, [r1, #0]
 8003c40:	e003      	b.n	8003c4a <_printf_i+0x76>
 8003c42:	2a75      	cmp	r2, #117	; 0x75
 8003c44:	d021      	beq.n	8003c8a <_printf_i+0xb6>
 8003c46:	2a78      	cmp	r2, #120	; 0x78
 8003c48:	d1dc      	bne.n	8003c04 <_printf_i+0x30>
 8003c4a:	2278      	movs	r2, #120	; 0x78
 8003c4c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003c50:	496e      	ldr	r1, [pc, #440]	; (8003e0c <_printf_i+0x238>)
 8003c52:	e064      	b.n	8003d1e <_printf_i+0x14a>
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003c5a:	1d11      	adds	r1, r2, #4
 8003c5c:	6019      	str	r1, [r3, #0]
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0a3      	b.n	8003db0 <_printf_i+0x1dc>
 8003c68:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003c6c:	f102 0104 	add.w	r1, r2, #4
 8003c70:	6019      	str	r1, [r3, #0]
 8003c72:	d0d7      	beq.n	8003c24 <_printf_i+0x50>
 8003c74:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	da03      	bge.n	8003c84 <_printf_i+0xb0>
 8003c7c:	222d      	movs	r2, #45	; 0x2d
 8003c7e:	425b      	negs	r3, r3
 8003c80:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c84:	4962      	ldr	r1, [pc, #392]	; (8003e10 <_printf_i+0x23c>)
 8003c86:	220a      	movs	r2, #10
 8003c88:	e017      	b.n	8003cba <_printf_i+0xe6>
 8003c8a:	6820      	ldr	r0, [r4, #0]
 8003c8c:	6819      	ldr	r1, [r3, #0]
 8003c8e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003c92:	d003      	beq.n	8003c9c <_printf_i+0xc8>
 8003c94:	1d08      	adds	r0, r1, #4
 8003c96:	6018      	str	r0, [r3, #0]
 8003c98:	680b      	ldr	r3, [r1, #0]
 8003c9a:	e006      	b.n	8003caa <_printf_i+0xd6>
 8003c9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ca0:	f101 0004 	add.w	r0, r1, #4
 8003ca4:	6018      	str	r0, [r3, #0]
 8003ca6:	d0f7      	beq.n	8003c98 <_printf_i+0xc4>
 8003ca8:	880b      	ldrh	r3, [r1, #0]
 8003caa:	4959      	ldr	r1, [pc, #356]	; (8003e10 <_printf_i+0x23c>)
 8003cac:	2a6f      	cmp	r2, #111	; 0x6f
 8003cae:	bf14      	ite	ne
 8003cb0:	220a      	movne	r2, #10
 8003cb2:	2208      	moveq	r2, #8
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003cba:	6865      	ldr	r5, [r4, #4]
 8003cbc:	60a5      	str	r5, [r4, #8]
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	f2c0 809c 	blt.w	8003dfc <_printf_i+0x228>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	f020 0004 	bic.w	r0, r0, #4
 8003cca:	6020      	str	r0, [r4, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d13f      	bne.n	8003d50 <_printf_i+0x17c>
 8003cd0:	2d00      	cmp	r5, #0
 8003cd2:	f040 8095 	bne.w	8003e00 <_printf_i+0x22c>
 8003cd6:	4675      	mov	r5, lr
 8003cd8:	2a08      	cmp	r2, #8
 8003cda:	d10b      	bne.n	8003cf4 <_printf_i+0x120>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	07da      	lsls	r2, r3, #31
 8003ce0:	d508      	bpl.n	8003cf4 <_printf_i+0x120>
 8003ce2:	6923      	ldr	r3, [r4, #16]
 8003ce4:	6862      	ldr	r2, [r4, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	bfde      	ittt	le
 8003cea:	2330      	movle	r3, #48	; 0x30
 8003cec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003cf4:	ebae 0305 	sub.w	r3, lr, r5
 8003cf8:	6123      	str	r3, [r4, #16]
 8003cfa:	f8cd 8000 	str.w	r8, [sp]
 8003cfe:	463b      	mov	r3, r7
 8003d00:	aa03      	add	r2, sp, #12
 8003d02:	4621      	mov	r1, r4
 8003d04:	4630      	mov	r0, r6
 8003d06:	f7ff feef 	bl	8003ae8 <_printf_common>
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d155      	bne.n	8003dba <_printf_i+0x1e6>
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d12:	b005      	add	sp, #20
 8003d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d18:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003d1c:	493c      	ldr	r1, [pc, #240]	; (8003e10 <_printf_i+0x23c>)
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d26:	f100 0504 	add.w	r5, r0, #4
 8003d2a:	601d      	str	r5, [r3, #0]
 8003d2c:	d001      	beq.n	8003d32 <_printf_i+0x15e>
 8003d2e:	6803      	ldr	r3, [r0, #0]
 8003d30:	e002      	b.n	8003d38 <_printf_i+0x164>
 8003d32:	0655      	lsls	r5, r2, #25
 8003d34:	d5fb      	bpl.n	8003d2e <_printf_i+0x15a>
 8003d36:	8803      	ldrh	r3, [r0, #0]
 8003d38:	07d0      	lsls	r0, r2, #31
 8003d3a:	bf44      	itt	mi
 8003d3c:	f042 0220 	orrmi.w	r2, r2, #32
 8003d40:	6022      	strmi	r2, [r4, #0]
 8003d42:	b91b      	cbnz	r3, 8003d4c <_printf_i+0x178>
 8003d44:	6822      	ldr	r2, [r4, #0]
 8003d46:	f022 0220 	bic.w	r2, r2, #32
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	e7b1      	b.n	8003cb4 <_printf_i+0xe0>
 8003d50:	4675      	mov	r5, lr
 8003d52:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d56:	fb02 3310 	mls	r3, r2, r0, r3
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d60:	4603      	mov	r3, r0
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d1f5      	bne.n	8003d52 <_printf_i+0x17e>
 8003d66:	e7b7      	b.n	8003cd8 <_printf_i+0x104>
 8003d68:	6808      	ldr	r0, [r1, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	6949      	ldr	r1, [r1, #20]
 8003d6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d72:	d004      	beq.n	8003d7e <_printf_i+0x1aa>
 8003d74:	1d10      	adds	r0, r2, #4
 8003d76:	6018      	str	r0, [r3, #0]
 8003d78:	6813      	ldr	r3, [r2, #0]
 8003d7a:	6019      	str	r1, [r3, #0]
 8003d7c:	e007      	b.n	8003d8e <_printf_i+0x1ba>
 8003d7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d82:	f102 0004 	add.w	r0, r2, #4
 8003d86:	6018      	str	r0, [r3, #0]
 8003d88:	6813      	ldr	r3, [r2, #0]
 8003d8a:	d0f6      	beq.n	8003d7a <_printf_i+0x1a6>
 8003d8c:	8019      	strh	r1, [r3, #0]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6123      	str	r3, [r4, #16]
 8003d92:	4675      	mov	r5, lr
 8003d94:	e7b1      	b.n	8003cfa <_printf_i+0x126>
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	1d11      	adds	r1, r2, #4
 8003d9a:	6019      	str	r1, [r3, #0]
 8003d9c:	6815      	ldr	r5, [r2, #0]
 8003d9e:	6862      	ldr	r2, [r4, #4]
 8003da0:	2100      	movs	r1, #0
 8003da2:	4628      	mov	r0, r5
 8003da4:	f7fc fa1c 	bl	80001e0 <memchr>
 8003da8:	b108      	cbz	r0, 8003dae <_printf_i+0x1da>
 8003daa:	1b40      	subs	r0, r0, r5
 8003dac:	6060      	str	r0, [r4, #4]
 8003dae:	6863      	ldr	r3, [r4, #4]
 8003db0:	6123      	str	r3, [r4, #16]
 8003db2:	2300      	movs	r3, #0
 8003db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db8:	e79f      	b.n	8003cfa <_printf_i+0x126>
 8003dba:	6923      	ldr	r3, [r4, #16]
 8003dbc:	462a      	mov	r2, r5
 8003dbe:	4639      	mov	r1, r7
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	47c0      	blx	r8
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d0a2      	beq.n	8003d0e <_printf_i+0x13a>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	079b      	lsls	r3, r3, #30
 8003dcc:	d507      	bpl.n	8003dde <_printf_i+0x20a>
 8003dce:	2500      	movs	r5, #0
 8003dd0:	f104 0919 	add.w	r9, r4, #25
 8003dd4:	68e3      	ldr	r3, [r4, #12]
 8003dd6:	9a03      	ldr	r2, [sp, #12]
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	429d      	cmp	r5, r3
 8003ddc:	db05      	blt.n	8003dea <_printf_i+0x216>
 8003dde:	68e0      	ldr	r0, [r4, #12]
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	4298      	cmp	r0, r3
 8003de4:	bfb8      	it	lt
 8003de6:	4618      	movlt	r0, r3
 8003de8:	e793      	b.n	8003d12 <_printf_i+0x13e>
 8003dea:	2301      	movs	r3, #1
 8003dec:	464a      	mov	r2, r9
 8003dee:	4639      	mov	r1, r7
 8003df0:	4630      	mov	r0, r6
 8003df2:	47c0      	blx	r8
 8003df4:	3001      	adds	r0, #1
 8003df6:	d08a      	beq.n	8003d0e <_printf_i+0x13a>
 8003df8:	3501      	adds	r5, #1
 8003dfa:	e7eb      	b.n	8003dd4 <_printf_i+0x200>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1a7      	bne.n	8003d50 <_printf_i+0x17c>
 8003e00:	780b      	ldrb	r3, [r1, #0]
 8003e02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e0a:	e765      	b.n	8003cd8 <_printf_i+0x104>
 8003e0c:	080042c7 	.word	0x080042c7
 8003e10:	080042b6 	.word	0x080042b6

08003e14 <memmove>:
 8003e14:	4288      	cmp	r0, r1
 8003e16:	b510      	push	{r4, lr}
 8003e18:	eb01 0302 	add.w	r3, r1, r2
 8003e1c:	d803      	bhi.n	8003e26 <memmove+0x12>
 8003e1e:	1e42      	subs	r2, r0, #1
 8003e20:	4299      	cmp	r1, r3
 8003e22:	d10c      	bne.n	8003e3e <memmove+0x2a>
 8003e24:	bd10      	pop	{r4, pc}
 8003e26:	4298      	cmp	r0, r3
 8003e28:	d2f9      	bcs.n	8003e1e <memmove+0xa>
 8003e2a:	1881      	adds	r1, r0, r2
 8003e2c:	1ad2      	subs	r2, r2, r3
 8003e2e:	42d3      	cmn	r3, r2
 8003e30:	d100      	bne.n	8003e34 <memmove+0x20>
 8003e32:	bd10      	pop	{r4, pc}
 8003e34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003e3c:	e7f7      	b.n	8003e2e <memmove+0x1a>
 8003e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e42:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003e46:	e7eb      	b.n	8003e20 <memmove+0xc>

08003e48 <_free_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d045      	beq.n	8003edc <_free_r+0x94>
 8003e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e54:	1f0c      	subs	r4, r1, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bfb8      	it	lt
 8003e5a:	18e4      	addlt	r4, r4, r3
 8003e5c:	f000 f8d6 	bl	800400c <__malloc_lock>
 8003e60:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <_free_r+0x98>)
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	4610      	mov	r0, r2
 8003e66:	b933      	cbnz	r3, 8003e76 <_free_r+0x2e>
 8003e68:	6063      	str	r3, [r4, #4]
 8003e6a:	6014      	str	r4, [r2, #0]
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e72:	f000 b8cc 	b.w	800400e <__malloc_unlock>
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	d90c      	bls.n	8003e94 <_free_r+0x4c>
 8003e7a:	6821      	ldr	r1, [r4, #0]
 8003e7c:	1862      	adds	r2, r4, r1
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	bf04      	itt	eq
 8003e82:	681a      	ldreq	r2, [r3, #0]
 8003e84:	685b      	ldreq	r3, [r3, #4]
 8003e86:	6063      	str	r3, [r4, #4]
 8003e88:	bf04      	itt	eq
 8003e8a:	1852      	addeq	r2, r2, r1
 8003e8c:	6022      	streq	r2, [r4, #0]
 8003e8e:	6004      	str	r4, [r0, #0]
 8003e90:	e7ec      	b.n	8003e6c <_free_r+0x24>
 8003e92:	4613      	mov	r3, r2
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	b10a      	cbz	r2, 8003e9c <_free_r+0x54>
 8003e98:	42a2      	cmp	r2, r4
 8003e9a:	d9fa      	bls.n	8003e92 <_free_r+0x4a>
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	1858      	adds	r0, r3, r1
 8003ea0:	42a0      	cmp	r0, r4
 8003ea2:	d10b      	bne.n	8003ebc <_free_r+0x74>
 8003ea4:	6820      	ldr	r0, [r4, #0]
 8003ea6:	4401      	add	r1, r0
 8003ea8:	1858      	adds	r0, r3, r1
 8003eaa:	4282      	cmp	r2, r0
 8003eac:	6019      	str	r1, [r3, #0]
 8003eae:	d1dd      	bne.n	8003e6c <_free_r+0x24>
 8003eb0:	6810      	ldr	r0, [r2, #0]
 8003eb2:	6852      	ldr	r2, [r2, #4]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	4401      	add	r1, r0
 8003eb8:	6019      	str	r1, [r3, #0]
 8003eba:	e7d7      	b.n	8003e6c <_free_r+0x24>
 8003ebc:	d902      	bls.n	8003ec4 <_free_r+0x7c>
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	602b      	str	r3, [r5, #0]
 8003ec2:	e7d3      	b.n	8003e6c <_free_r+0x24>
 8003ec4:	6820      	ldr	r0, [r4, #0]
 8003ec6:	1821      	adds	r1, r4, r0
 8003ec8:	428a      	cmp	r2, r1
 8003eca:	bf04      	itt	eq
 8003ecc:	6811      	ldreq	r1, [r2, #0]
 8003ece:	6852      	ldreq	r2, [r2, #4]
 8003ed0:	6062      	str	r2, [r4, #4]
 8003ed2:	bf04      	itt	eq
 8003ed4:	1809      	addeq	r1, r1, r0
 8003ed6:	6021      	streq	r1, [r4, #0]
 8003ed8:	605c      	str	r4, [r3, #4]
 8003eda:	e7c7      	b.n	8003e6c <_free_r+0x24>
 8003edc:	bd38      	pop	{r3, r4, r5, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000015c 	.word	0x2000015c

08003ee4 <_malloc_r>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	1ccd      	adds	r5, r1, #3
 8003ee8:	f025 0503 	bic.w	r5, r5, #3
 8003eec:	3508      	adds	r5, #8
 8003eee:	2d0c      	cmp	r5, #12
 8003ef0:	bf38      	it	cc
 8003ef2:	250c      	movcc	r5, #12
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	db01      	blt.n	8003efe <_malloc_r+0x1a>
 8003efa:	42a9      	cmp	r1, r5
 8003efc:	d903      	bls.n	8003f06 <_malloc_r+0x22>
 8003efe:	230c      	movs	r3, #12
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	2000      	movs	r0, #0
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
 8003f06:	f000 f881 	bl	800400c <__malloc_lock>
 8003f0a:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <_malloc_r+0xb4>)
 8003f0c:	6814      	ldr	r4, [r2, #0]
 8003f0e:	4621      	mov	r1, r4
 8003f10:	b991      	cbnz	r1, 8003f38 <_malloc_r+0x54>
 8003f12:	4c22      	ldr	r4, [pc, #136]	; (8003f9c <_malloc_r+0xb8>)
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	b91b      	cbnz	r3, 8003f20 <_malloc_r+0x3c>
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f000 f867 	bl	8003fec <_sbrk_r>
 8003f1e:	6020      	str	r0, [r4, #0]
 8003f20:	4629      	mov	r1, r5
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 f862 	bl	8003fec <_sbrk_r>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d126      	bne.n	8003f7a <_malloc_r+0x96>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	6033      	str	r3, [r6, #0]
 8003f30:	4630      	mov	r0, r6
 8003f32:	f000 f86c 	bl	800400e <__malloc_unlock>
 8003f36:	e7e4      	b.n	8003f02 <_malloc_r+0x1e>
 8003f38:	680b      	ldr	r3, [r1, #0]
 8003f3a:	1b5b      	subs	r3, r3, r5
 8003f3c:	d41a      	bmi.n	8003f74 <_malloc_r+0x90>
 8003f3e:	2b0b      	cmp	r3, #11
 8003f40:	d90f      	bls.n	8003f62 <_malloc_r+0x7e>
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	50cd      	str	r5, [r1, r3]
 8003f46:	18cc      	adds	r4, r1, r3
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 f860 	bl	800400e <__malloc_unlock>
 8003f4e:	f104 000b 	add.w	r0, r4, #11
 8003f52:	1d23      	adds	r3, r4, #4
 8003f54:	f020 0007 	bic.w	r0, r0, #7
 8003f58:	1ac3      	subs	r3, r0, r3
 8003f5a:	d01b      	beq.n	8003f94 <_malloc_r+0xb0>
 8003f5c:	425a      	negs	r2, r3
 8003f5e:	50e2      	str	r2, [r4, r3]
 8003f60:	bd70      	pop	{r4, r5, r6, pc}
 8003f62:	428c      	cmp	r4, r1
 8003f64:	bf0d      	iteet	eq
 8003f66:	6863      	ldreq	r3, [r4, #4]
 8003f68:	684b      	ldrne	r3, [r1, #4]
 8003f6a:	6063      	strne	r3, [r4, #4]
 8003f6c:	6013      	streq	r3, [r2, #0]
 8003f6e:	bf18      	it	ne
 8003f70:	460c      	movne	r4, r1
 8003f72:	e7e9      	b.n	8003f48 <_malloc_r+0x64>
 8003f74:	460c      	mov	r4, r1
 8003f76:	6849      	ldr	r1, [r1, #4]
 8003f78:	e7ca      	b.n	8003f10 <_malloc_r+0x2c>
 8003f7a:	1cc4      	adds	r4, r0, #3
 8003f7c:	f024 0403 	bic.w	r4, r4, #3
 8003f80:	42a0      	cmp	r0, r4
 8003f82:	d005      	beq.n	8003f90 <_malloc_r+0xac>
 8003f84:	1a21      	subs	r1, r4, r0
 8003f86:	4630      	mov	r0, r6
 8003f88:	f000 f830 	bl	8003fec <_sbrk_r>
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d0cd      	beq.n	8003f2c <_malloc_r+0x48>
 8003f90:	6025      	str	r5, [r4, #0]
 8003f92:	e7d9      	b.n	8003f48 <_malloc_r+0x64>
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
 8003f96:	bf00      	nop
 8003f98:	2000015c 	.word	0x2000015c
 8003f9c:	20000160 	.word	0x20000160

08003fa0 <_realloc_r>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	4607      	mov	r7, r0
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	460e      	mov	r6, r1
 8003fa8:	b921      	cbnz	r1, 8003fb4 <_realloc_r+0x14>
 8003faa:	4611      	mov	r1, r2
 8003fac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fb0:	f7ff bf98 	b.w	8003ee4 <_malloc_r>
 8003fb4:	b922      	cbnz	r2, 8003fc0 <_realloc_r+0x20>
 8003fb6:	f7ff ff47 	bl	8003e48 <_free_r>
 8003fba:	4625      	mov	r5, r4
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc0:	f000 f826 	bl	8004010 <_malloc_usable_size_r>
 8003fc4:	4284      	cmp	r4, r0
 8003fc6:	d90f      	bls.n	8003fe8 <_realloc_r+0x48>
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4638      	mov	r0, r7
 8003fcc:	f7ff ff8a 	bl	8003ee4 <_malloc_r>
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d0f2      	beq.n	8003fbc <_realloc_r+0x1c>
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4622      	mov	r2, r4
 8003fda:	f7ff fbfd 	bl	80037d8 <memcpy>
 8003fde:	4631      	mov	r1, r6
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	f7ff ff31 	bl	8003e48 <_free_r>
 8003fe6:	e7e9      	b.n	8003fbc <_realloc_r+0x1c>
 8003fe8:	4635      	mov	r5, r6
 8003fea:	e7e7      	b.n	8003fbc <_realloc_r+0x1c>

08003fec <_sbrk_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4c06      	ldr	r4, [pc, #24]	; (8004008 <_sbrk_r+0x1c>)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	6023      	str	r3, [r4, #0]
 8003ff8:	f7ff fb5a 	bl	80036b0 <_sbrk>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d102      	bne.n	8004006 <_sbrk_r+0x1a>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	b103      	cbz	r3, 8004006 <_sbrk_r+0x1a>
 8004004:	602b      	str	r3, [r5, #0]
 8004006:	bd38      	pop	{r3, r4, r5, pc}
 8004008:	200002a4 	.word	0x200002a4

0800400c <__malloc_lock>:
 800400c:	4770      	bx	lr

0800400e <__malloc_unlock>:
 800400e:	4770      	bx	lr

08004010 <_malloc_usable_size_r>:
 8004010:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004014:	2800      	cmp	r0, #0
 8004016:	f1a0 0004 	sub.w	r0, r0, #4
 800401a:	bfbc      	itt	lt
 800401c:	580b      	ldrlt	r3, [r1, r0]
 800401e:	18c0      	addlt	r0, r0, r3
 8004020:	4770      	bx	lr
	...

08004024 <_init>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr

08004030 <_fini>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr
